<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tremble的个人博客</title>
  
  <subtitle>不乱于心，不困于情，不念过往，不畏将来。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-02T02:02:15.312Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack Zhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu的基本使用</title>
    <link href="http://example.com/2022/10/02/ubuntu%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/10/02/ubuntu%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-10-01T23:17:37.000Z</published>
    <updated>2022-11-02T02:02:15.312Z</updated>
    
    <content type="html"><![CDATA[<p>实验室的服务器到了，今天给组里的同学们分享了一下Ubuntu的基本使用，匆忙写了一点相关的东西，顺便发上来，虽然也挺基础的，但反正博客也没多少东西，就记录一下好了。</p><h1 id="文件组织结构"><a href="#文件组织结构" class="headerlink" title="文件组织结构"></a>文件组织结构</h1><p><code>/</code>为根目录，为系统最基本的目录</p><p><code>/home</code>下有用户名的文件夹，该文件夹就是<code>~</code>为主目录，为日常使用的目录</p><p>命令在终端中输入，需要注意当前所在的文件夹</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir xx</span><br></pre></td></tr></table></figure><p>进入文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd xxx</span><br></pre></td></tr></table></figure><p>可以使用相对路劲和绝对路径</p><p>使用相对目录回到上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>进入根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>根目录下的文件非常重要，不要轻易动。</p><p>显示当前文件夹下有哪些文件和文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>后面可以接参数</p><p>如果是接-a则是查看隐藏文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>如果后接-l则是查看详细信息，包括权限</p><p>vim的使用</p><p>vim是一个非常经典的文件编辑工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.py</span><br></pre></td></tr></table></figure><p>即可进入编辑</p><p>进入模式之后可以点击键盘的<code>i</code>或者<code>a</code>插入，即可输入，方向键可以控制，详细的命令很多，可以自行查询</p><p>编辑完成之后，需要点击<code>esc</code>退出编辑模式</p><p>随后点击<code>shift + :</code>，就是输入:，然后输入w表示保存，随后输入q表示退出</p><p>即输入<code>:wq</code>完成保存退出，后面有时候需要加上<code>!</code>表示强制</p><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><p>root是最高权限，在此状态下不要轻易动一些东西，危险</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>进入root模式</p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>退出root模式</p><p>发现文件上有锁或者x说明当前是不能使用的，需要授权</p><p>权限包括三个部分，用户user、组group、其他人other</p><p>权限内容也包括方面，读r、写w、执行x，对应的编码是4、2、1</p><p>如向日葵远程传文件，无法执行，常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 xxx</span><br></pre></td></tr></table></figure><p>xxx为文件名，包括扩展名</p><p>给文件夹和文件夹下的所有都授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 xxx</span><br></pre></td></tr></table></figure><p>常用*</p><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 *</span><br></pre></td></tr></table></figure><p>*一般是指全部，这里就是指当前文件夹下的所有文件（不包含下一级目录）</p><p>很多命令执行没有权限的时候都需要前面加<code>sudo</code></p><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm xx</span><br></pre></td></tr></table></figure><p>有时候后面会跟-rf，表示不询问，把子目录也都删除，<strong>慎用，非常危险</strong></p><h1 id="日常使用文件"><a href="#日常使用文件" class="headerlink" title="日常使用文件"></a>日常使用文件</h1><p>下载的<code>.deb</code>文件可以直接点击安装，或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxx</span><br></pre></td></tr></table></figure><p>也可以安装</p><p><code>.sh</code>文件可以直接输入<code>./xxx.sh</code>执行，或者<code>sh xxx.sh</code>，没有权限的时候先授权</p><p>常用命令，查看有哪些包可以升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>随后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>将这些包升级，这是经常需要做的</p><p>apt为一种包管理的工具，有很多时候可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xx</span><br></pre></td></tr></table></figure><p>直接下载安装</p><p>snap是ubuntu近些年大力推广的一种包管理的工具</p><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>这是一种非常方便的远程控制的方法，广泛使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ps@10.120.16.12</span><br></pre></td></tr></table></figure><p>输入密码即可远程命令行控制，ps为用户名，后面的为当前局域网下的ip地址，目前在有线校园网的情况下可以直接这样连接</p><p>pycharm（专业版）、vscode等软件都可以直接使用远程ssh的解释器，本地写代码，然后远程直接跑。</p>]]></content>
    
    
    <summary type="html">一点小记录</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</title>
    <link href="http://example.com/2022/09/21/HRNet/"/>
    <id>http://example.com/2022/09/21/HRNet/</id>
    <published>2022-09-20T19:57:37.000Z</published>
    <updated>2022-11-01T15:57:39.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition"><a href="#【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition" class="headerlink" title="【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition"></a>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在计算机视觉中高分辨的表示是非常重要的，HRNet是用于识别的高分辨网络，广泛的用于姿态检测以及语义分割中，也可用于目标检测。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>相比一般的网络，HRNet具有特殊的结构，一般的卷积神经网络往往是随着网络的深入，特征图的分辨率逐渐由高到低，这样的网络结构设计适合一般的视觉问题，视觉空间信息都是冗余的，对信息的精准度要求不高，但是这种结构在面对关键点检测以及语义分割问题的时候就不能很好的完成任务，精准度不够。因此就有了HRNet的结构设计如下图所示：<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet1.png" alt="HRnet1"><br>HRNet网络在模型的整个过程中都能保持高分辨率，采用并行的网络，不同的流的分辨率不同，在网络的第n个阶段有n流个网络，从前往后每次下采样一个流，同时在阶段的连接出对信息进行交汇，从高分辨率使用卷积到低分辨率，从低分辨率的流上采样到高分辨率的流，最终得到模型。<br>模型的特色有两点：</p><ul><li>使用并行连接从高到低分辨率的卷积流</li><li>跨分辨率反复交换信息</li></ul><p>使用并行连接使得在整个过程中都保持了高分辨率的表示，使用了跨分辨率的反复融合信息使得模型对于位置具有很强的敏感性，可以较好的完成相关的工作。</p><h2 id="模型的变体"><a href="#模型的变体" class="headerlink" title="模型的变体"></a>模型的变体</h2><p>在HRNet模型中共提出了三种模型的结构，HRNetV1 HRNetV2以及HRNetV2p这三种结构<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet2.png" alt="HRnet2"><br>其中V1只使用了融合最后的高分辨率流，这种结构相比V2运算量更小，而在关键点检测任务中和V2版本性能基本没有差别。而V2版本对最后的信息都进行了融合，在语义分割任务中表现较好。V2p则是在V2的基础上形成特征金字塔，更适合目标检测任务。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>消融实验证明分辨率确实会影响关键的检测的质量，这一点与一般的感觉相符。对多分辨率融合的实验也证明了融合会带来好的性能提升。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>对该模型的研究中可以得到一个结论，针对特定的问题来设计网络架构可能是有用的。此外，一个可能的误解在于分辨率越高，HRNet的内存消耗越大，但是实际是在姿态估计、语义分割以及目标检测中，内存成本并未很高。</p>]]></content>
    
    
    <summary type="html">读论文的记录</summary>
    
    
    
    <category term="姿态估计" scheme="http://example.com/categories/%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>今日随笔</title>
    <link href="http://example.com/2022/05/10/%E4%BB%8A%E6%97%A5%E9%9A%8F%E7%AC%94/"/>
    <id>http://example.com/2022/05/10/%E4%BB%8A%E6%97%A5%E9%9A%8F%E7%AC%94/</id>
    <published>2022-05-10T00:00:00.000Z</published>
    <updated>2022-10-28T04:18:12.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我终于把图床修好了"><a href="#我终于把图床修好了" class="headerlink" title="我终于把图床修好了"></a>我终于把图床修好了</h1><p>之前gitee的图床用不了，因此这段时间博客都一片404（其实本来也影响不大，毕竟也没几篇博客），今天总算抽出时间修一下，虽然不是什么特别麻烦的事，就是懒。之前的图还真是手动一个一个传的，效率太低，现在用了typora+picgo+github，总算是能用了，方便了不少，希望以后会多更新下吧。之前说的要把大作业都传上去，也能方便后面的学弟学妹，但是后面要么懒，要么就做毕设，最近毕设做的差不多了，又要开始准备做研究生的项目了（虽然确实不多）。</p><p>不过前段时间做的一个有意义的事是联系了两个小伙伴，把自己的考研经历分享到了<a href="https://github.com/CoderJackZhu/XD-AI-graduate_entrance_exam">GitHub</a>，三人成绩还行（平均380+），也上岸了，下一篇就分享一下经历。</p><p>最近在做毕设论文的修改，同时也学习一下深度学习相关领域的知识，毕竟准研究生了，要学的很多东西可以先准备着了。</p>]]></content>
    
    
    <summary type="html">进步了</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置</title>
    <link href="http://example.com/2022/04/10/Ubuntu%2020.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/10/Ubuntu%2020.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-10T00:08:37.000Z</published>
    <updated>2022-10-28T04:18:12.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-20-04下Pytorch深度学习环境搭建以及常用工具配置"><a href="#Ubuntu-20-04下Pytorch深度学习环境搭建以及常用工具配置" class="headerlink" title="Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置"></a>Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置</h1><p>作者：CoderJackZhu</p><p>从事计算机相关行业的在今后学习工作过程中总会接触到Linux系统，而且在很多情况下，Windows下可能会出现一些奇奇怪怪的bug，这些问题部分是系统的问题导致的，比如常见的路径中不能带中文。深度学习环境有时候为了更好的管理机器，取得更好的效率也常常采用Linux系统，这里选择Ubuntu是对于个人的萌新而言，应该选择尽量大众些的系统，出问题也容易找到解决办法，比如由于各种误操作，linux系统我至少已经重装过不下二十次了，为了更好的学习相关知识，这样一个系统的搭建也是需要的，这里写出这个博客为了方便使用，也让我之后重装系统的时候不用再找好几个博客了。</p><h2 id="“双系统”中Ubuntu安装"><a href="#“双系统”中Ubuntu安装" class="headerlink" title="“双系统”中Ubuntu安装"></a>“双系统”中Ubuntu安装</h2><p>这里的所说的双系统并不是真正的单个硬盘上多个挂载点的双系统，而是把第二个系统装在移动硬盘里面，这样正常开机默认还是Windows系统，需要选择系统就在进入系统时长按<code>F11</code>（不同品牌电脑不同），选择相应的系统就可以进入了，这样的安装相比一个硬盘上多个挂载点简易不少，配置难度低，而且不易出问题，不然一不小心两个系统都不能用了，这样Linux出了问题只需要直接覆盖重装就可以了，下面是具体步骤：</p><h3 id="准备需要的工具"><a href="#准备需要的工具" class="headerlink" title="准备需要的工具"></a>准备需要的工具</h3><p>这里软件方面需要准备的是，从官方网站上下载Ubuntu的镜像，以及刻录软件。刻录软件使用UltraIso或者balentEtcher都是可以的，balentEtcher相对操作更简易些。</p><p>硬件需要准备的是一个U盘用于制作启动盘，尽量大于等于16G，一个移动硬盘用于安装系统，尽量大于128G，毕竟实际使用过程中数据集也比较大，还是需要给后续留足空间。</p><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>安装好Format后选择文件为之前下的系统镜像，选择硬件为U盘，然后点击Flash就可以了，等几分钟安装校验完就可以了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>然后重启并选择使用刚才的U盘启动，就可以进入安装Ubuntu的界面了，正常使用的话选择中文汉语，正常安装，勾选安装第三方软件。这个时候可以插上移动硬盘了，然后输入自己的用户名密码什么的，之后就进入选择安装位置了，这里点击清理磁盘安装就可以了，不然挂载点就很不太好理解，然后下一步点击你插入的那个硬盘，<strong>这里注意别选错</strong>，根据你的硬盘大小就能判断出了，选错其他盘的话可能你的数据就凉了，然后下一步。然后选择地图上的位置为shanghai就可以了，之后就进入安装了，等一会安装完然后点击重新启动，然后根据提示拔掉U盘，然后开机的时候选择那个硬盘启动，这个时候硬盘的名字就已经是Ubuntu了，然后两次回车就可以进入系统了，到这里，系统的安装就算完成了。</p><h2 id="深度学习Pytorch环境配置"><a href="#深度学习Pytorch环境配置" class="headerlink" title="深度学习Pytorch环境配置"></a>深度学习Pytorch环境配置</h2><p>正常使用深度学习环境跑代码，GPU是必不可少，这里只演示GPU版本的pytorch的安装，所需要的工具为Anaconda、CUDA、cuDNN、Pytorch。Anaconda可以用来管理不同版本的环境，CUDA和cuDNN是使用GPU计算所需要的工具这里需要注意相互之间的匹配关系，首先去<a href="https://pytorch.org/">pytorch官网</a>可以看到</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136735.png" alt="6"></p><p>因此这里选择CUDA11.3，然后根据CUDA的版本，选择cuDNN的版本，具体在下载cuDNN的时候可以看到。</p><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>安装NVIDIA驱动有多种方式，比如可以去官网下载最新版，这里介绍最简单的一种，首先打开软件与更新，然后点附加驱动这里，系统默认用的是开源的的驱动，这里选最上面的几个版本高的就可以，这里安装的cuda11.3驱动至少要470以上，然后点击应用更改等一会就可以了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136053.png" alt="1"></p><p>安装完成之后在命令行输入<code>nvidia-smi</code>就可以看到下图GPU情况，这就说明驱动基本没问题了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136894.png" alt="4"></p><h3 id="下载安装cuda"><a href="#下载安装cuda" class="headerlink" title="下载安装cuda"></a>下载安装cuda</h3><p>这里找<a href="https://developer.nvidia.com/cuda-downloads">官方网站</a></p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136125.png" alt="2"></p><p>可以看到这里默认是11.6版本的，这里点击下方中的<code>Archive of Previous CUDA Releases</code>并选择对于的11.3版本，都是11.3的情况下选最后一位高的，之后进入以下界面，选择对应版本，然后先后输入下方的两行，第一行输入命令行，就开始下载了，下载完之后在对应的目录打开终端命令行，然后输入第二行，就开始安装了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137818.png" alt="3"></p><p>安装过程中看到勾选多个项目的时候，把第一项的X勾选框点下回车取消掉，由于之前已经安装了驱动，所有这里不需要安装里面附带的驱动，然后切换Install并点击回车，等待就可以安装好了。</p><p>然后添加路径，修改<code>.bashrc</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>#在末尾添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda/bin$&#123;PATH:+:$&#123;PATH&#125;&#125; </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125; </span><br></pre></td></tr></table></figure><p>更新刚才输入的内容，在命令行输入： <code>source ~/.bashrc</code></p><p>安装成功输入<code>nvcc -V</code></p><h3 id="cuDNN的安装"><a href="#cuDNN的安装" class="headerlink" title="cuDNN的安装"></a>cuDNN的安装</h3><p>到<a href="https://developer.nvidia.com/cudnn">官网</a>下载文件：点击如图<code>Download cuDNN</code>按钮。下载需要NVIDIA的账号，没有的需要先注册一个。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137133.png" alt="5"></p><p>然后进入<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse742-10">下载界面</a>并选择Previous Archive</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137217.png" alt="7"></p><p>选择CUDA11.x对于的cuDNNv8.2 选择Runtime Library版的deb文件进行下载：</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137992.png" alt="8"></p><p>安装cuDNN过程与CUDA类似：<br>在下载的文件的文件夹里面打开终端，执行命令<code>sudo dpkg -i &lt;name&gt;</code>，其中<code>&lt;name&gt;</code>为刚才下载的deb文件名<br>执行命令<code>sudo apt install &lt;name&gt;</code>,其中<code>&lt;name&gt;</code>要和自己下载的cudnn版本匹配，比如这里是libcudnn8</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>Anaconda用于控制版本管理，直接在系统的python里装不太方便，库的控制也不那么直观，使用Anaconda之后会方便很多。</p><p>这里直接从<a href="https://www.anaconda.com/products/individual">官网</a>下载就可以，速度也不错，下载完之后在下载的文件夹打开终端，这里重点，命令行不要输入<code>sudo</code>，直接<code>sh &lt;name&gt;</code> <code>name</code>为刚才下的文件名然后可以了，一路回车过完协议书，然后yes同意，然后要么回车要么yes就可以了。千万别在命令行前面加<code>sudo</code>，这样anaconda3的文件夹就安装在<code>root</code>下了，这样感觉有时候不方便；直接<code>sh</code>就可以安装在你的主目录下，装好退出命令行就可以用了。</p><p>安装过程先一路回车，然后按要求都yes就好。</p><p>安装后退出命令行，然后重新进入命令行，然后输入<code>conda</code>，若出现如下则证明安装成功，若出现command not found则重启系统，若还不行则需要添加环境变量。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137141.png" alt="10"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>再执行conda，若好则安装结束，否则手动添加环境变量</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>若vim未安装，先安装，可以使用<code>sudo apt install vim</code>安装（或者使用<code>sudo gedit ~/.bashrc</code>也可打开文件），然后执行上述命令，然后在文件的最后添加，这里的内容不要直接复制，根据自己的用户名来定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export</span><br><span class="line">PATH=/home/&lt;自己的用户名&gt;/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>输入完成后点击<code>ESC</code>, 然后输入<code>:wq</code>保存退出.</p><p>然后更新环境变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入conda,检查是否配置成功。</p><h2 id="创建环境并安装PyTorch"><a href="#创建环境并安装PyTorch" class="headerlink" title="创建环境并安装PyTorch"></a>创建环境并安装PyTorch</h2><p>安装后一般应用栏里是没有这个软件的，需要在命令行中输入<code>anaconda-navigator</code>等待进入就可以了，然后点左方的environment然后点下方的加号创建环境，想个环境的名字，选择需要的python版本，这里也可以使用命令来创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n &lt;环境名&gt; python=3.8</span><br></pre></td></tr></table></figure><p>等待创建完成后在命令行中输入<code>conda info -e</code>即可查看现有哪些环境</p><p>然后进入相应的环境输入下面命令，其中这里使用的环境名为<code>env1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate env1</span><br></pre></td></tr></table></figure><p>即可激活，若为windows下则为<code>conda activate env1</code>。</p><p>这样就进入环境了，随后输入pytorch官网上的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</span><br></pre></td></tr></table></figure><p>如果速度慢，则需要换源，一般默认使用清华源为以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><strong>或者</strong>打开主目录下的隐藏文件<code>.condarc</code>，将其内容整体更换为以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssl_verify: true</span><br><span class="line">show_channel_urls: true</span><br><span class="line"></span><br><span class="line">channels:</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行 <code>conda clean -i</code> 清除索引缓存。</p><p>这时候安装命令就要把最后的<code>-c pytorch</code>去掉，变成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3</span><br></pre></td></tr></table></figure><p>就可以很快的下载了。</p><p>若为单次换下载换源则命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/  </span><br></pre></td></tr></table></figure><p>在后面加上需要安装的库名字即可。</p><h2 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h2><p>若全部安装完成，则新建一个python脚本hello.py，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">print(torch)</span><br><span class="line">print(torchvision)</span><br><span class="line">print(torch.cuda.is_available())</span><br><span class="line">x=torch.randn(5, 3)</span><br><span class="line">print(x)</span><br><span class="line">print(torch.cuda.device)</span><br><span class="line">print(torch.__version__)</span><br><span class="line">print(torchvision.__version__)</span><br><span class="line">print(torch.version)</span><br><span class="line">print(torch.version.cuda) # Corresponding CUDA version</span><br><span class="line">print(torch.backends.cudnn.version()) # Corresponding cuDNN version</span><br><span class="line">print(torch.cuda.get_device_name(0)) # GPU type</span><br></pre></td></tr></table></figure><p>即可查看详细情况，若cuda可用这里显示true就说明安装成功。</p><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><p>深度学习环境其他非常常用的软件一般还有VScode和Pychram，一般这两个都安装比较好。</p><p>BT下载以及磁力链下载很多时候是需要的，因此需要下载工具</p><p>下载工具可以用Free Download Manger，还是非常好用的，还有qbittorrent和Motrix作为备用下载软件，这两个软件下载后不用安装，需要用的时候打开，也非常不错。</p><p>其他比如截屏剪切板等功能用utools也挺好，不过高级功能后来收费了。</p><h2 id="windows下安装的差异"><a href="#windows下安装的差异" class="headerlink" title="windows下安装的差异"></a>windows下安装的差异</h2><h3 id="更新驱动"><a href="#更新驱动" class="headerlink" title="更新驱动"></a>更新驱动</h3><p>正常使用的话，下载GeForce Experience然后把驱动更新到最新版即可，或者手动下载驱动，没有特殊需要的话默认最新版就好。</p><h3 id="安装cuda和cudnn"><a href="#安装cuda和cudnn" class="headerlink" title="安装cuda和cudnn"></a>安装cuda和cudnn</h3><p>主体部分和linux下大同小异，按要求下载安装对应版本即可，安装cuda后打开命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>返回版本号说明安装cuda成功。</p><p>不过cudnn这里下载完后是复制到cuda对应的bin目录里面，一般是C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA。</p><p>安装后有时候不能使用则需要添加环境变量，在系统环境变量里的Path项下添加几个路径</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</p><p> 　　C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64</p><p>安装完成后进入路径然后运行测试，成功则为以下界面。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102138180.png" alt="11"></p><p>然后运行测试的代码即可。</p>]]></content>
    
    
    <summary type="html">一点小记录</summary>
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>考研后的思考</title>
    <link href="http://example.com/2021/12/29/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>http://example.com/2021/12/29/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/</id>
    <published>2021-12-29T00:08:37.000Z</published>
    <updated>2022-10-28T04:18:12.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考研后的感想"><a href="#考研后的感想" class="headerlink" title="考研后的感想"></a>考研后的感想</h1><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>今天是考研后的第二天晚上，考研生活算是过去了，然后就是之后的新生活了，对于之后的安排，目前来看，主线是做毕业设计，在期间可以学习一些东西。我计划近期将之前做过的大作业再复习一遍，然后整理出来，发到博客里，这不是什么大的任务，我打算先从这样的小事做起，慢慢学知识。毕竟，在有目标的情况下很多时候还不一定能一直坚持做事，现在时间比较闲了，能做多少事就比较随缘了。</p>]]></content>
    
    
    <summary type="html">反内卷而不躺平</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>记录我的第一次搭建博客</title>
    <link href="http://example.com/2020/10/31/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/10/31/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-31T00:00:00.000Z</published>
    <updated>2022-10-28T04:18:12.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="艰难的第一次搭博客"><a href="#艰难的第一次搭博客" class="headerlink" title="艰难的第一次搭博客"></a>艰难的第一次搭博客</h1><p>其实我在很早之前就想搭博客，大概大一开始的时候，就想着做一些有意义，有兴趣的事，结果一直拖到了现在才开始真正意义上的实践，我也是趁着这次对大一的培训搭建博客，顺便才开始做，看上去不是很难的一件事，实际去做，我却遇到了很多困难，就光配置markdown的front-matter的时候，因为不知道里面还有其他东西，就一直报错，而且和其他一起弄的，我还找不到原因，就导致我花了很大的时间，最后遇到的一个问题是图片的在线存储问题，最后用的码云的仓库来放的，最后头像也解决了，我才能说，我基本才算是搭建成了一个基本的框架。<br>哎，之前跟现在相比，其实并不忙的，但也是懒，还有各种找的原因，结果到现在，对这样搭博客的基本知识都还都不太了解，有点小愧疚，以后还是得加把劲了。<br>现在还有一堆大作业要去写，剩下的时间也不多了，就先这样吧。</p>]]></content>
    
    
    <summary type="html">我太难了</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
