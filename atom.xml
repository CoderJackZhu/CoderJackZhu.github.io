<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack&#39;s Blog</title>
  
  <subtitle>不乱于心，不困于情，不念过往，不畏将来。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-02T17:19:40.032Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack Zhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈《原神》游戏的理解</title>
    <link href="http://example.com/2023/02/07/%E6%B5%85%E8%B0%88%E3%80%8A%E5%8E%9F%E7%A5%9E%E3%80%8B%E6%B8%B8%E6%88%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2023/02/07/%E6%B5%85%E8%B0%88%E3%80%8A%E5%8E%9F%E7%A5%9E%E3%80%8B%E6%B8%B8%E6%88%8F%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2023-02-07T00:00:00.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈《原神》游戏的理解"><a href="#浅谈《原神》游戏的理解" class="headerlink" title="浅谈《原神》游戏的理解"></a>浅谈《原神》游戏的理解</h1><h2 id="关于游戏本身"><a href="#关于游戏本身" class="headerlink" title="关于游戏本身"></a>关于游戏本身</h2><p>游戏本身而言是全平台兼容的角色扮演（RPG）游戏，在更多的时候是划分在手游类别的，在手游中属于天花板的水平，但是相比于很多主机游戏以及部分买断制游戏如埃尔登法环、赛博朋克2077、荒野大镖客等游戏还是有不小的差距。作为一款国产二次元游戏，该游戏做的已经很不错了，自从游戏发布以来，月充值流水屡创新高，小部分的重度氪金用户支撑起了大部分的零氪玩家，不氪金也可以体验到游戏的所有内容和大部分游戏体验，氪金的点主要就在于角色和武器需要抽取，而抽取的成本不低，16元一抽，在非常特殊的情况下甚至需要两千多元才能抽取到一个角色，这也是游戏被诟病的主要一点。</p><h2 id="对于游戏受众"><a href="#对于游戏受众" class="headerlink" title="对于游戏受众"></a>对于游戏受众</h2><p>对于游戏受众而言，可以在游戏中体验到不同的国家，在扮演旅行者的过程中体验到多种多样的内容，很多人是冲着游戏角色来的，也有很多是体验高质量的画风等等。</p><p>游戏好的一点是游戏属于内容制作型，属于PVE即玩家对战环境，这样玩家与玩家之间不存在什么竞争关系，这样使得游戏的风气是非常和谐的，在这么长时间的游戏过程中和很多玩家交流，都是非常热心帮忙的，大佬后期长草经常会帮新玩家探索打boss等等；而很多游戏都是属于PVP，即玩家和玩家对战，这样的竞技性游戏很多时候几乎每次玩都会见到互相骂的情况。相比之下，原神游戏的环境还是好了太多。</p><p>相比于买断制游戏，这种无门槛体验所有内容的方式还是更适应实际的需要，很多人天天呼吁买断制如何好，然而叫好不叫座，动辄数百元的游戏，还没开始玩就要先花几百元，还不知道好不好以及能不能玩得来，成本还是太高了，所谓的外国人更喜欢3A大作也并没有，原神在海外的流水也非常高，也很受国外玩家喜爱。对于很多游戏玩家，不仅有很多买断游戏，也在原神中氪金了很多，很多游戏都玩，也有了不同的游戏体验。</p><p>除此之外，游戏制作中还花重金在音乐和画面上，在游戏中也能体验到各国传统的音乐，相关音乐很多时候都是各国的交响乐团演奏的，制作品质不低，高雅的艺术也变得易于接受和体验，对于玩家而言也是很不错的。游戏的制作过程中也发扬了部分中国传统文化，将很多传统傩舞戏剧等内容加入游戏，将非常晦涩难以接近体验的传统文化变得通俗易接受，也让外国人了解到这些内容，虽然不能完全成为文化输出，但是让外国人了解到这些，甚至进一步加深了解还是很好的，相比之前大价钱在各国建设孔子学院而收效甚微，这种潜移默化的方式还是更容易接受，也赚得了外国人的钱。虽然米哈游作为一个公司也是要盈利，但是在盈利的过程中确实对于中国文化的输出起到了一点的作用，这点也是值得肯定的。</p><h2 id="对于网络喷子"><a href="#对于网络喷子" class="headerlink" title="对于网络喷子"></a>对于网络喷子</h2><p>一部分网络喷子的关注点在于《原神》的全平台兼容性，全平台中很多玩家都是手游玩家，而很多玩家是PC玩家或者主机玩家，在游戏圈中存在着所谓的鄙视链，即主机&gt;PC&gt;手游，这种鄙视究其根本在于经济基础，一般家庭很少会有花几千元买游戏机；个人电脑适用性较广；手游成本最低，可以玩手游的人最为广泛。《原神》更多的时候是作为手游来比较，因此很多时候处于鄙视圈底层。这种鄙视深究可以发现，相比人种歧视，很多时候贫富差距的歧视以及地域歧视都不容忽略。</p><p>另一部分原因是由于游戏做的过于好，游戏质量之高远高于之前的其他很多游戏，游戏火出圈后就存在几种问题：</p><ol><li>很多人接触的游戏都是较少的，只有主流的《王者荣耀》、《和平精英》、《英雄联盟》或者吃鸡、守望、CF、csgo等等，部分游戏质量并不高，但是基于社交的游戏更符合大众推广，哪怕游戏质量一般，但是《原神》在手游上的天花板让很多人第一次接触到很好玩的游戏，日常痴迷甚至到处开喷说不如原神，在和《原神》毫无关系的地方刷游戏的相关内容或者引战。</li><li>游戏玩家数量过多导致的问题就是受众过于广泛，作为一款12+的游戏，游戏中可能有小中学生到高中大学生，再到不同年龄阶段和不同文化水平的人，俗话说林子大了什么鸟都有，存在部分不理智的玩家也很正常，这种就类似于一个地区的人有个别不文明就直接认为整个地区的人都有问题，这样的玩家毕竟是少数。很多游戏如英雄联盟等有时候玩家也会有不理智的行为，也不会有很多人认为这一群体就有问题了，同样也是受众广泛，表现很多时候并不同。</li><li>游戏质量高对于竞争对手的压力，相比之前的很多游戏，这都算是降维打击，演示的视频就是实际实机视频，这种就类似于吃了一碗红烧牛肉面，打开方便面发现包装和实物一样，这种在手游中从未遇到过，导致竞品难以望其项背，相比于投巨资做同等级别的游戏还可能竞争不过，抹黑反串引战已经是成本最低的最优解了，因此从两年半前游戏发布以及游戏刚出之前很多媒体都声称黑暗降临，至今很多都在抹黑并在各种无关的地方刷相关内容，或者取相关的名字换头像，然后发引战言论，这也就是最初所谓op的由来。</li><li>很多玩家的跟风心理，部分玩家也没玩过很多游戏，也没体验过《原神》，但是经常在很多地方刷到相关的反对言论就认为游戏如何不好，低人一等并鄙视玩游戏的人，很多这种人都是心智不成熟，玩游戏还能玩出优越感，也有的这些人后来也开始玩原神，也是出于跟风心理，不过这也正常，毕竟很多人都是这样的。</li><li>部分玩家的崇洋媚外心理，认为外国人做的东西就是好的，中国人做的就是不好的，就要抹黑，然而在国外，现在已经过去了两年半，《原神》游戏的流水还是很高，热度也不断，移动端2022年就超过了190亿，实际而言，身边玩原神的很多，大部分都不是手游玩家，实际流水要高很多，游戏质量得到了肯定。在国外都很受欢迎证明外国人也肯定，那么很多时候在国内黑的更多可能会有点奇怪。</li></ol><h2 id="对玩家潜在的风险"><a href="#对玩家潜在的风险" class="headerlink" title="对玩家潜在的风险"></a>对玩家潜在的风险</h2><p>游戏制作较为精美，而且属于角色扮演类型的游戏可能会导致的问题有以下几点：</p><ol><li>游戏较为精美而容易沉溺于虚拟世界，一玩就会花去很多时间，导致用于平时生活的时间减少，相比于很多游戏而言，《原神》用于每日基本任务等内容的时间约为半小时，加上活动抽时间做，实际而言消耗的时间并不是很严重的问题。</li><li>游戏中角色可以见到多样的世界，扮演能力强大的旅行者，而这种体验是在现实生活中不可能体验到的，出于人类的本能，这种落差是肯定会面对的，很多时候游戏玩家每天会花更多的精力在游戏中，进而影响现实生活。</li><li>游戏虽然可以联机，但是主要玩法和内容都是单机游戏，这种在互联网时代普遍存在的问题更严重了：缺乏和人的交流，更多的和游戏内探索互动，可能导致和人交往的能力下降，性格内向以及部分性格障碍，这种潜在的问题对于部分人而言是有影响的。</li><li>游戏的一大卖点在于人物角色，人物的塑造，声音以及服装的设计是非常优秀的。实事求是的来说，一定程度的软色情，很多时候经常“老婆”的这样叫着，很多时候是出于图一乐的心理，但是有时候也会有不小的问题。游戏中的角色很多时候都有一定的人设和意义，代表着一定的特点，很多时候都是较为完美的，让人非常喜爱，但是过于沉迷于虚拟的人往往会提高人的阈值，这样在现实生活中见到正常人都是不完美的时候产生的巨大落差有可能会使得不能很好的面对现实生活中的人。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这些更多的是为了树立一个正确的思想，《原神》也不可能非常完美，但是为了黑而黑或者跟风输出可能并没有什么意义，游戏作为日常生活的一个调剂，适度游戏放松也是很好的，过于沉迷游戏而忽略现实生活则会带来问题，游戏只是个工具，想玩什么就玩什么，但是借此非要打个标签就没必要了，愿读者也有正确的价值观。</p>]]></content>
    
    
    <summary type="html">一点点的理解</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>ActionFormer论文分享</title>
    <link href="http://example.com/2022/11/09/%E5%AD%A6%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%88%86%E4%BA%ABActionFormer/"/>
    <id>http://example.com/2022/11/09/%E5%AD%A6%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%88%86%E4%BA%ABActionFormer/</id>
    <published>2022-11-09T18:01:37.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ActionFormer论文分享"><a href="#ActionFormer论文分享" class="headerlink" title="ActionFormer论文分享"></a>ActionFormer论文分享</h1><p>由于水平有限，讲的内容也可能会出现不是很正确的地方，欢迎大家批评指正，沟通交流。今天给大家分享的是之前做过的项目中使用到的一个模型，这个模型在时序定位中取得了非常好的效果，这是Papers with Code上在THUMOS14数据集上的结果，当后面几名还是相差一个点的时候，已经比第二名领先了十多个点，因此我拿来分享一下这个模型，讲一下关于模型的结构以及使用感受。</p><h2 id="ActionFormer在THUMOS‘14效果"><a href="#ActionFormer在THUMOS‘14效果" class="headerlink" title="ActionFormer在THUMOS‘14效果"></a>ActionFormer在THUMOS‘14效果</h2><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/tal_pwc.png" alt="image-20221106153056010"></p><h2 id="视频领域常用的数据集"><a href="#视频领域常用的数据集" class="headerlink" title="视频领域常用的数据集"></a>视频领域常用的数据集</h2><p><strong>THUMOS14：</strong>数据集包含大量的人类动作在真实环境中开源视频。 动作包括日常生活动作。THUMOS14的主要挑战是动作实例持续时间的巨大变化。具体来说，短动作实例只能持续十分之一秒，而长动作实例可以持续数百秒。</p><p><strong>ActivityNet ：</strong>是目前视频动作分析方向最大的数据集，包含分类和检测两个任务。目前的1.3版本有200个类别，涵盖了200种不同的日常活动。</p><p><strong>EPIC Kitchens 100：</strong>记录了多个多角度、无脚本、本地环境中的厨房场景。它们均来自拍摄者真实的日常饮食生活，并且使用了一种新颖的实时音频评论方法来收集注释。</p><h2 id="时序定位任务"><a href="#时序定位任务" class="headerlink" title="时序定位任务"></a>时序定位任务</h2><p>动作识别可以看作是一个纯分类问题，其中要识别的视频基本上已经过剪辑，即每个视频包含一段明确的动作，视频时长较短，且有唯一确定的动作类别。而在时序动作定位领域，视频通常没有被剪辑，视频时长较长，动作通常只发生在视频中的一小段时间内，视频可能包含多个动作，也可能不包含动作，即为背景。找到视频中动作的起始和结束，很多时候还需要找出其中动作属于哪一类。这一任务类似于时间上的目标检测，因此很多目标检测中的方法也常常拿来应用在这一领域，比如Faster-RCNN中两阶段的思想，先找到候选区域，再筛选，回归修正。有基于滑窗的方法，基于候选区域的方法。而本次讲的ActionFormer则是单阶段无锚框的方法，如图中所示，直接通过Transformer模型预测出每一刻的动作类别和他们这一时间点到动作开始和结束的距离。</p><h2 id="ActionFormer模型结构"><a href="#ActionFormer模型结构" class="headerlink" title="ActionFormer模型结构"></a>ActionFormer模型结构</h2><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/base_ActionFormer.png" alt="image-20221106155642020"></p><p>这一模型使用分类分数以及回归分数来计算出动作的情况，分类的分数用于对动作进行分类，回归的分数用于回归出动作的开始和结束的时间点，这个过程就有点像目标检测，事实上，时序定位的很多方法都是从目标检测中借鉴过来的，这里的分类和回归也就像目标检测中找到锚框中目标的类别和对锚框体的回归，不过时序定位的这个任务是在时间上一维的。</p><h3 id="总体结构、输入输出"><a href="#总体结构、输入输出" class="headerlink" title="总体结构、输入输出"></a>总体结构、输入输出</h3><p>模型的输入是首先对视频经过特征提取，根据视频的长度处理成很多个向量，随后把特征向量送入网络，网络的开始是使用卷积进行映射，随后是一个Transformer结构作为编码器，经过这个结构之后，使用了一个轻量级的卷积进行解码，最后使用分类和回归头得到每个时刻的预测类别，开始和结束，最后通过转化变成预测的结果。</p><p>在送入模型训练的时候，只有特征向量是不行的，还是需要一些信息的，比如训练的时候就需要标注信息，片段的起始和末尾，所属的类型，划分为训练还是测试，视频的持续时间和fps帧率信息，在测试的时候不需要标注信息，但是关于视频的帧率和持续时间这些信息还是需要的。</p><p>对于模型的输出，我们需要的是一段时间的开始时刻，结束时刻以及对应的分类，因此问题可以转化为</p><p>对于时间上的每一个时刻，预测出$p(a_t),d^s_t,d^e_t$，其中$p(a_t)$包含C个值，随后使用以下的公式来求出该时刻预测的结果</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/tal_input.png" alt="image-20221106155554231"></p><p>具体的结构可以划分为以下几个部分：</p><ul><li><p><strong>特征提取</strong></p></li><li><p><strong>使用卷积进行映射</strong></p></li><li><p><strong>Transformer编码器</strong></p></li><li><p><strong>卷积网络解码</strong></p></li><li><p><strong>分类和回归头</strong></p></li><li><p><strong>损失计算</strong></p></li></ul><p>接下来我讲详细讲这几个部分。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/action_structure.png" alt="image-20221106160221382"></p><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>特征提取是视频领域常用的操作，因为视频相比图片来说信息量更大，而且视频中存在着非常多的信息冗余，如果直接把视频放入网络，计算量也会很高，因此很多任务会使用特征提取后的特征进行处理。</p><p>使用预训练好的模型进行特征提取，一般常用双流I3D进行特征提取，双流I3D模型是视频领域中经典的模型，一路使用RGB信息建模空间信息，一路采用光流信息建模时间变化信息。预训练一般使用Kinetics-400这样的大型数据集，提取出1024*帧数的矩阵，向量和视频的帧具有时间上的对应关系，不过经过实验，其他模型如R(2+1)D、TSN等模型也可以，效果差不多。这里提取特征的时候，一般是采用一个特征向量对应16帧，然后每次向后移动1帧的这种形式，具体参数根据需要进行更改，这种得到的特征向量个数其实是总帧数-16，不过这点差别是不影响结果的。</p><h3 id="用卷积进行映射"><a href="#用卷积进行映射" class="headerlink" title="用卷积进行映射"></a>用卷积进行映射</h3><p>使用这一操作，论文中说有助于更好地结合时间序列数据的本地上下文，对于这一点，我的理解是卷积操作使得可以更好的捕捉到相邻时间前后的信息。</p><p>另一点是稳定视觉Transformer的训练，这一点怎么体现的具体论文也没说，我也不是很清楚。</p><h3 id="多尺度Transformer进行编码"><a href="#多尺度Transformer进行编码" class="headerlink" title="多尺度Transformer进行编码"></a>多尺度Transformer进行编码</h3><p>把$Z_0$进行特征表示，乘以一个W<br>$$<br>Q&#x3D;Z^0W_Q, K&#x3D;Z^0W_K, V&#x3D;Z^0W_V<br>$$<br>自注意力输出，这里就是一般Transformer的这种方式，计算一个余弦相似度，然后进行缩放，进行softmax操作，最后和Value相乘得到结果。<br>$$<br>S&#x3D;softmax(QK^T&#x2F;\sqrt(D_q))V<br>$$<br>使用Transfomer的时候这里是通过使用可选的下采样构建特征池化金字塔，从而更好的关注到时间上不同距离的影响。</p><p>作者在后续的消融实验中证明了使用Transformer结构是取得好的效果最重要的原因。</p><p>在编码的时候作者也考虑使用位置编码，但是发现加上之后效果会更差，因此默认是没有使用的</p><h3 id="使用卷积网络进行解码"><a href="#使用卷积网络进行解码" class="headerlink" title="使用卷积网络进行解码"></a>使用卷积网络进行解码</h3><p>对于使用卷积网络进行解码这一步骤中，这里使用的是带有分类和回归头的轻量级卷积网络。分类头检查特征金字塔上所有 L 层的每个时刻 t，并预测每个时刻 t 的动作概率 p(at)。分类网络是使用 3 层 1D 卷积实现的。回归头也检查金字塔上所有 L 级的每一时刻 t。不同之处在于，仅当当前时间步 t 位于某个动作中时，回归头才预测到动作开始和偏移的距离。除此之外，在后处理环节还使用了非极大值抑制（nms）操作，把多余的预测消除掉。</p><h3 id="损失计算"><a href="#损失计算" class="headerlink" title="损失计算"></a>损失计算</h3><p>在损失计算这部分，使用了分类损失和回归损失，仅当预测的分类不是背景的情况下计算回归损失，相应的还设置了权重。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/loss_actionformer.png" alt="image-20221106194551616"></p><h2 id="模型缺点与改进方向"><a href="#模型缺点与改进方向" class="headerlink" title="模型缺点与改进方向"></a>模型缺点与改进方向</h2><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>最大的问题应该还是在于使用预提取的视频特征，不是端到端的模型，从实际使用来说，特征提取花的时间远大于实际的代码训练与推理，在项目应用中，一个几秒的视频特征提取在1060上需要6秒左右，而模型推理只需要0.02秒，这一问题在应用时感知非常明显。</p></li><li><p>另一问题应该还是使用了大量有标注的信息，而这一信息不易获取而且成本很高。</p></li><li><p>文中还提到了一个问题在于存在预定义动作词汇的约束。</p></li></ul><h3 id="改进方向"><a href="#改进方向" class="headerlink" title="改进方向"></a>改进方向</h3><ul><li><p>我觉得一个问题在于可以通过可学习的前处理操作替代特征提取的操作，特征提取这一步骤使用的预训练好的模型，在使用的时候是不计算梯度，更新参数的。最近我读了一篇视频领域标注的论文SWINBERT，感觉其中的思想可以参考一些，该模型的前面使用了Video Swin Transformer模型，后面使用了稀疏注意力，而且模型对于帧率是自适应的，不需要再指定视频的帧率信息，这一思路或许可以应用在这一领域。</p></li><li><p>另一个问题在于这种方法还是有监督学习，需要使用大量人工标记的视频样本进行学习还有预定义的动作词汇的约束，未来可以从预训练方面还有半监督无监督学习等方向改进，在没有人工标签的情况下从视频和文本语料库中学习。</p></li><li><p>还有一点作者认为目前还缺乏时序动作定位领域的预训练。目前在很多领域都有很大的数据集预训练，随后微调都能取得不错的效果，而在这一领域目前还缺乏。</p></li></ul><h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><ul><li><p>该模型不仅可以预测有开始和结束帧的情况，还可以把开始帧设为0，仅预测结束帧作为关键帧，经过实验发现这样的方法使用起来也没问题，也能取得很好的效果。</p></li><li><p>在项目中，使用该模型效果确实非常好，而且足够轻量级就可以完成一定要求的任务，训练推理都很快。</p></li><li><p>在不调参的情况下，使用其他数据集的参数配置效果就很好。</p></li><li><p>经过实验，在小规模数据集上表现良好。</p></li><li><p>额外增加了特征提取的操作，增加了使用的复杂度，使用起来需要组合，考虑更多的问题。</p></li></ul><p>总而言之，这一模型在时序动作定位领域这一较为小众的方向中取得了不错的成绩，如果是相关方向的值得一看。</p>]]></content>
    
    
    <summary type="html">之前读的论文</summary>
    
    
    
    <category term="时序定位" scheme="http://example.com/categories/%E6%97%B6%E5%BA%8F%E5%AE%9A%E4%BD%8D/"/>
    
    
    <category term="ActionFormer" scheme="http://example.com/tags/ActionFormer/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu的基本使用</title>
    <link href="http://example.com/2022/11/01/ubuntu%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/11/01/ubuntu%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-01T23:17:37.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<p>实验室的服务器到了，今天给组里的同学们分享了一下Ubuntu的基本使用，匆忙写了一点相关的东西，顺便发上来，虽然也挺基础的，但反正博客也没多少东西，就记录一下好了。</p><h1 id="文件组织结构"><a href="#文件组织结构" class="headerlink" title="文件组织结构"></a>文件组织结构</h1><p><code>/</code>为根目录，为系统最基本的目录</p><p><code>/home</code>下有用户名的文件夹，该文件夹就是<code>~</code>为主目录，为日常使用的目录</p><p>命令在终端中输入，需要注意当前所在的文件夹</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir xx</span><br></pre></td></tr></table></figure><p>进入文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd xxx</span><br></pre></td></tr></table></figure><p>可以使用相对路劲和绝对路径</p><p>使用相对目录回到上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>进入根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>根目录下的文件非常重要，不要轻易动。</p><p>显示当前文件夹下有哪些文件和文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>后面可以接参数</p><p>如果是接-a则是查看隐藏文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>如果后接-l则是查看详细信息，包括权限</p><p>vim的使用</p><p>vim是一个非常经典的文件编辑工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.py</span><br></pre></td></tr></table></figure><p>即可进入编辑</p><p>进入模式之后可以点击键盘的<code>i</code>或者<code>a</code>插入，即可输入，方向键可以控制，详细的命令很多，可以自行查询</p><p>编辑完成之后，需要点击<code>esc</code>退出编辑模式</p><p>随后点击<code>shift + :</code>，就是输入:，然后输入w表示保存，随后输入q表示退出</p><p>即输入<code>:wq</code>完成保存退出，后面有时候需要加上<code>!</code>表示强制</p><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><p>root是最高权限，在此状态下不要轻易动一些东西，危险</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>进入root模式</p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>退出root模式</p><p>发现文件上有锁或者x说明当前是不能使用的，需要授权</p><p>权限包括三个部分，用户user、组group、其他人other</p><p>权限内容也包括方面，读r、写w、执行x，对应的编码是4、2、1</p><p>如向日葵远程传文件，无法执行，常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 xxx</span><br></pre></td></tr></table></figure><p>xxx为文件名，包括扩展名</p><p>给文件夹和文件夹下的所有都授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 xxx</span><br></pre></td></tr></table></figure><p>常用*</p><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 *</span><br></pre></td></tr></table></figure><p>*一般是指全部，这里就是指当前文件夹下的所有文件（不包含下一级目录）</p><p>很多命令执行没有权限的时候都需要前面加<code>sudo</code></p><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm xx</span><br></pre></td></tr></table></figure><p>有时候后面会跟-rf，表示不询问，把子目录也都删除，<strong>慎用，非常危险</strong></p><h1 id="日常使用文件"><a href="#日常使用文件" class="headerlink" title="日常使用文件"></a>日常使用文件</h1><p>下载的<code>.deb</code>文件可以直接点击安装，或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxx</span><br></pre></td></tr></table></figure><p>也可以安装</p><p><code>.sh</code>文件可以直接输入<code>./xxx.sh</code>执行，或者<code>sh xxx.sh</code>，没有权限的时候先授权</p><p>常用命令，查看有哪些包可以升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>随后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>将这些包升级，这是经常需要做的</p><p>apt为一种包管理的工具，有很多时候可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xx</span><br></pre></td></tr></table></figure><p>直接下载安装</p><p>snap是ubuntu近些年大力推广的一种包管理的工具</p><h1 id="anaconda的基本使用"><a href="#anaconda的基本使用" class="headerlink" title="anaconda的基本使用"></a>anaconda的基本使用</h1><p>创建虚拟环境可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n &lt;name&gt; python=3.x</span><br></pre></td></tr></table></figure><p>这种方式，随后可以根据<code>requirements.txt</code>的信息执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>安装所需的包</p><p>也可以通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yaml</span><br></pre></td></tr></table></figure><p>从yaml文件中创建环境并安装包。</p><p>在linux下使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate &lt;name&gt;</span><br></pre></td></tr></table></figure><p>在windows下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;name&gt;</span><br></pre></td></tr></table></figure><p>激活指定的虚拟环境</p><p>使用以下命令可以删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n &lt;name&gt; --all</span><br></pre></td></tr></table></figure><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>这是一种非常方便的远程控制的方法，广泛使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ps@10.120.16.12</span><br></pre></td></tr></table></figure><p>输入密码即可远程命令行控制，ps为用户名，后面的为当前局域网下的ip地址，目前在有线校园网的情况下可以直接这样连接</p><p>pycharm（专业版）、vscode等软件都可以直接使用远程ssh的解释器，本地写代码，然后远程直接跑。</p>]]></content>
    
    
    <summary type="html">一点小记录</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</title>
    <link href="http://example.com/2022/09/20/HRNet/"/>
    <id>http://example.com/2022/09/20/HRNet/</id>
    <published>2022-09-20T19:57:37.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition"><a href="#【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition" class="headerlink" title="【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition"></a>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在计算机视觉中高分辨的表示是非常重要的，HRNet是用于识别的高分辨网络，广泛的用于姿态检测以及语义分割中，也可用于目标检测。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>相比一般的网络，HRNet具有特殊的结构，一般的卷积神经网络往往是随着网络的深入，特征图的分辨率逐渐由高到低，这样的网络结构设计适合一般的视觉问题，视觉空间信息都是冗余的，对信息的精准度要求不高，但是这种结构在面对关键点检测以及语义分割问题的时候就不能很好的完成任务，精准度不够。因此就有了HRNet的结构设计如下图所示：<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet1.png" alt="HRnet1"><br>HRNet网络在模型的整个过程中都能保持高分辨率，采用并行的网络，不同的流的分辨率不同，在网络的第n个阶段有n流个网络，从前往后每次下采样一个流，同时在阶段的连接出对信息进行交汇，从高分辨率使用卷积到低分辨率，从低分辨率的流上采样到高分辨率的流，最终得到模型。<br>模型的特色有两点：</p><ul><li>使用并行连接从高到低分辨率的卷积流</li><li>跨分辨率反复交换信息</li></ul><p>使用并行连接使得在整个过程中都保持了高分辨率的表示，使用了跨分辨率的反复融合信息使得模型对于位置具有很强的敏感性，可以较好的完成相关的工作。</p><h2 id="模型的变体"><a href="#模型的变体" class="headerlink" title="模型的变体"></a>模型的变体</h2><p>在HRNet模型中共提出了三种模型的结构，HRNetV1 HRNetV2以及HRNetV2p这三种结构<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet2.png" alt="HRnet2"><br>其中V1只使用了融合最后的高分辨率流，这种结构相比V2运算量更小，而在关键点检测任务中和V2版本性能基本没有差别。而V2版本对最后的信息都进行了融合，在语义分割任务中表现较好。V2p则是在V2的基础上形成特征金字塔，更适合目标检测任务。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>消融实验证明分辨率确实会影响关键的检测的质量，这一点与一般的感觉相符。对多分辨率融合的实验也证明了融合会带来好的性能提升。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>对该模型的研究中可以得到一个结论，针对特定的问题来设计网络架构可能是有用的。此外，一个可能的误解在于分辨率越高，HRNet的内存消耗越大，但是实际是在姿态估计、语义分割以及目标检测中，内存成本并未很高。</p>]]></content>
    
    
    <summary type="html">读论文的记录</summary>
    
    
    
    <category term="姿态估计" scheme="http://example.com/categories/%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</title>
    <link href="http://example.com/2022/09/20/Hello/"/>
    <id>http://example.com/2022/09/20/Hello/</id>
    <published>2022-09-20T19:57:37.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition"><a href="#【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition" class="headerlink" title="【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition"></a>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在计算机视觉中高分辨的表示是非常重要的，HRNet是用于识别的高分辨网络，广泛的用于姿态检测以及语义分割中，也可用于目标检测。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>相比一般的网络，HRNet具有特殊的结构，一般的卷积神经网络往往是随着网络的深入，特征图的分辨率逐渐由高到低，这样的网络结构设计适合一般的视觉问题，视觉空间信息都是冗余的，对信息的精准度要求不高，但是这种结构在面对关键点检测以及语义分割问题的时候就不能很好的完成任务，精准度不够。因此就有了HRNet的结构设计如下图所示：<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet1.png" alt="HRnet1"><br>HRNet网络在模型的整个过程中都能保持高分辨率，采用并行的网络，不同的流的分辨率不同，在网络的第n个阶段有n流个网络，从前往后每次下采样一个流，同时在阶段的连接出对信息进行交汇，从高分辨率使用卷积到低分辨率，从低分辨率的流上采样到高分辨率的流，最终得到模型。<br>模型的特色有两点：</p><ul><li>使用并行连接从高到低分辨率的卷积流</li><li>跨分辨率反复交换信息</li></ul><p>使用并行连接使得在整个过程中都保持了高分辨率的表示，使用了跨分辨率的反复融合信息使得模型对于位置具有很强的敏感性，可以较好的完成相关的工作。</p><h2 id="模型的变体"><a href="#模型的变体" class="headerlink" title="模型的变体"></a>模型的变体</h2><p>在HRNet模型中共提出了三种模型的结构，HRNetV1 HRNetV2以及HRNetV2p这三种结构<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet2.png" alt="HRnet2"><br>其中V1只使用了融合最后的高分辨率流，这种结构相比V2运算量更小，而在关键点检测任务中和V2版本性能基本没有差别。而V2版本对最后的信息都进行了融合，在语义分割任务中表现较好。V2p则是在V2的基础上形成特征金字塔，更适合目标检测任务。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>消融实验证明分辨率确实会影响关键的检测的质量，这一点与一般的感觉相符。对多分辨率融合的实验也证明了融合会带来好的性能提升。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>对该模型的研究中可以得到一个结论，针对特定的问题来设计网络架构可能是有用的。此外，一个可能的误解在于分辨率越高，HRNet的内存消耗越大，但是实际是在姿态估计、语义分割以及目标检测中，内存成本并未很高。</p>]]></content>
    
    
    <summary type="html">读论文的记录</summary>
    
    
    
    <category term="姿态估计" scheme="http://example.com/categories/%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>今日随笔</title>
    <link href="http://example.com/2022/05/10/%E4%BB%8A%E6%97%A5%E9%9A%8F%E7%AC%94/"/>
    <id>http://example.com/2022/05/10/%E4%BB%8A%E6%97%A5%E9%9A%8F%E7%AC%94/</id>
    <published>2022-05-10T00:00:00.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我终于把图床修好了"><a href="#我终于把图床修好了" class="headerlink" title="我终于把图床修好了"></a>我终于把图床修好了</h1><p>之前gitee的图床用不了，因此这段时间博客都一片404（其实本来也影响不大，毕竟也没几篇博客），今天总算抽出时间修一下，虽然不是什么特别麻烦的事，就是懒。之前的图还真是手动一个一个传的，效率太低，现在用了typora+picgo+github，总算是能用了，方便了不少，希望以后会多更新下吧。之前说的要把大作业都传上去，也能方便后面的学弟学妹，但是后面要么懒，要么就做毕设，最近毕设做的差不多了，又要开始准备做研究生的项目了（虽然确实不多）。</p><p>不过前段时间做的一个有意义的事是联系了两个小伙伴，把自己的考研经历分享到了<a href="https://github.com/CoderJackZhu/XD-AI-graduate_entrance_exam">GitHub</a>，三人成绩还行（平均380+），也上岸了，下一篇就分享一下经历。</p><p>最近在做毕设论文的修改，同时也学习一下深度学习相关领域的知识，毕竟准研究生了，要学的很多东西可以先准备着了。</p>]]></content>
    
    
    <summary type="html">进步了</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置</title>
    <link href="http://example.com/2022/04/10/Ubuntu%2020.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/10/Ubuntu%2020.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-10T00:08:37.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-20-04下Pytorch深度学习环境搭建以及常用工具配置"><a href="#Ubuntu-20-04下Pytorch深度学习环境搭建以及常用工具配置" class="headerlink" title="Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置"></a>Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置</h1><p>作者：CoderJackZhu</p><p>从事计算机相关行业的在今后学习工作过程中总会接触到Linux系统，而且在很多情况下，Windows下可能会出现一些奇奇怪怪的bug，这些问题部分是系统的问题导致的，比如常见的路径中不能带中文。深度学习环境有时候为了更好的管理机器，取得更好的效率也常常采用Linux系统，这里选择Ubuntu是对于个人的萌新而言，应该选择尽量大众些的系统，出问题也容易找到解决办法，比如由于各种误操作，linux系统我至少已经重装过不下二十次了，为了更好的学习相关知识，这样一个系统的搭建也是需要的，这里写出这个博客为了方便使用，也让我之后重装系统的时候不用再找好几个博客了。</p><h2 id="“双系统”中Ubuntu安装"><a href="#“双系统”中Ubuntu安装" class="headerlink" title="“双系统”中Ubuntu安装"></a>“双系统”中Ubuntu安装</h2><p>这里的所说的双系统并不是真正的单个硬盘上多个挂载点的双系统，而是把第二个系统装在移动硬盘里面，这样正常开机默认还是Windows系统，需要选择系统就在进入系统时长按<code>F11</code>（不同品牌电脑不同），选择相应的系统就可以进入了，这样的安装相比一个硬盘上多个挂载点简易不少，配置难度低，而且不易出问题，不然一不小心两个系统都不能用了，这样Linux出了问题只需要直接覆盖重装就可以了，下面是具体步骤：</p><h3 id="准备需要的工具"><a href="#准备需要的工具" class="headerlink" title="准备需要的工具"></a>准备需要的工具</h3><p>这里软件方面需要准备的是，从官方网站上下载Ubuntu的镜像，以及刻录软件。刻录软件使用UltraIso或者balentEtcher都是可以的，balentEtcher相对操作更简易些。</p><p>硬件需要准备的是一个U盘用于制作启动盘，尽量大于等于16G，一个移动硬盘用于安装系统，尽量大于128G，毕竟实际使用过程中数据集也比较大，还是需要给后续留足空间。</p><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>安装好Format后选择文件为之前下的系统镜像，选择硬件为U盘，然后点击Flash就可以了，等几分钟安装校验完就可以了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>然后重启并选择使用刚才的U盘启动，就可以进入安装Ubuntu的界面了，正常使用的话选择中文汉语，正常安装，勾选安装第三方软件。这个时候可以插上移动硬盘了，然后输入自己的用户名密码什么的，之后就进入选择安装位置了，这里点击清理磁盘安装就可以了，不然挂载点就很不太好理解，然后下一步点击你插入的那个硬盘，<strong>这里注意别选错</strong>，根据你的硬盘大小就能判断出了，选错其他盘的话可能你的数据就凉了，然后下一步。然后选择地图上的位置为shanghai就可以了，之后就进入安装了，等一会安装完然后点击重新启动，然后根据提示拔掉U盘，然后开机的时候选择那个硬盘启动，这个时候硬盘的名字就已经是Ubuntu了，然后两次回车就可以进入系统了，到这里，系统的安装就算完成了。</p><h2 id="深度学习Pytorch环境配置"><a href="#深度学习Pytorch环境配置" class="headerlink" title="深度学习Pytorch环境配置"></a>深度学习Pytorch环境配置</h2><p>正常使用深度学习环境跑代码，GPU是必不可少，这里只演示GPU版本的pytorch的安装，所需要的工具为Anaconda、CUDA、cuDNN、Pytorch。Anaconda可以用来管理不同版本的环境，CUDA和cuDNN是使用GPU计算所需要的工具这里需要注意相互之间的匹配关系，首先去<a href="https://pytorch.org/">pytorch官网</a>可以看到</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136735.png" alt="6"></p><p>因此这里选择CUDA11.3，然后根据CUDA的版本，选择cuDNN的版本，具体在下载cuDNN的时候可以看到。</p><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>安装NVIDIA驱动有多种方式，比如可以去官网下载最新版，这里介绍最简单的一种，首先打开软件与更新，然后点附加驱动这里，系统默认用的是开源的的驱动，这里选最上面的几个版本高的就可以，这里安装的cuda11.3驱动至少要470以上，然后点击应用更改等一会就可以了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136053.png" alt="1"></p><p>安装完成之后在命令行输入<code>nvidia-smi</code>就可以看到下图GPU情况，这就说明驱动基本没问题了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136894.png" alt="4"></p><h3 id="下载安装cuda"><a href="#下载安装cuda" class="headerlink" title="下载安装cuda"></a>下载安装cuda</h3><p>这里找<a href="https://developer.nvidia.com/cuda-downloads">官方网站</a></p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136125.png" alt="2"></p><p>可以看到这里默认是11.6版本的，这里点击下方中的<code>Archive of Previous CUDA Releases</code>并选择对于的11.3版本，都是11.3的情况下选最后一位高的，之后进入以下界面，选择对应版本，然后先后输入下方的两行，第一行输入命令行，就开始下载了，下载完之后在对应的目录打开终端命令行，然后输入第二行，就开始安装了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137818.png" alt="3"></p><p>安装过程中看到勾选多个项目的时候，把第一项的X勾选框点下回车取消掉，由于之前已经安装了驱动，所有这里不需要安装里面附带的驱动，然后切换Install并点击回车，等待就可以安装好了。</p><p>然后添加路径，修改<code>.bashrc</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>#在末尾添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda/bin$&#123;PATH:+:$&#123;PATH&#125;&#125; </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125; </span><br></pre></td></tr></table></figure><p>更新刚才输入的内容，在命令行输入： <code>source ~/.bashrc</code></p><p>安装成功输入<code>nvcc -V</code></p><h3 id="cuDNN的安装"><a href="#cuDNN的安装" class="headerlink" title="cuDNN的安装"></a>cuDNN的安装</h3><p>到<a href="https://developer.nvidia.com/cudnn">官网</a>下载文件：点击如图<code>Download cuDNN</code>按钮。下载需要NVIDIA的账号，没有的需要先注册一个。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137133.png" alt="5"></p><p>然后进入<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse742-10">下载界面</a>并选择Previous Archive</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137217.png" alt="7"></p><p>选择CUDA11.x对于的cuDNNv8.2 选择Runtime Library版的deb文件进行下载：</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137992.png" alt="8"></p><p>安装cuDNN过程与CUDA类似：<br>在下载的文件的文件夹里面打开终端，执行命令<code>sudo dpkg -i &lt;name&gt;</code>，其中<code>&lt;name&gt;</code>为刚才下载的deb文件名<br>执行命令<code>sudo apt install &lt;name&gt;</code>,其中<code>&lt;name&gt;</code>要和自己下载的cudnn版本匹配，比如这里是libcudnn8</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>Anaconda用于控制版本管理，直接在系统的python里装不太方便，库的控制也不那么直观，使用Anaconda之后会方便很多。</p><p>这里直接从<a href="https://www.anaconda.com/products/individual">官网</a>下载就可以，速度也不错，下载完之后在下载的文件夹打开终端，这里重点，命令行不要输入<code>sudo</code>，直接<code>sh &lt;name&gt;</code> <code>name</code>为刚才下的文件名然后可以了，一路回车过完协议书，然后yes同意，然后要么回车要么yes就可以了。千万别在命令行前面加<code>sudo</code>，这样anaconda3的文件夹就安装在<code>root</code>下了，这样感觉有时候不方便；直接<code>sh</code>就可以安装在你的主目录下，装好退出命令行就可以用了。</p><p>安装过程先一路回车，然后按要求都yes就好。</p><p>安装后退出命令行，然后重新进入命令行，然后输入<code>conda</code>，若出现如下则证明安装成功，若出现command not found则重启系统，若还不行则需要添加环境变量。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137141.png" alt="10"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>再执行conda，若好则安装结束，否则手动添加环境变量</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>若vim未安装，先安装，可以使用<code>sudo apt install vim</code>安装（或者使用<code>sudo gedit ~/.bashrc</code>也可打开文件），然后执行上述命令，然后在文件的最后添加，这里的内容不要直接复制，根据自己的用户名来定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export</span><br><span class="line">PATH=/home/&lt;自己的用户名&gt;/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>输入完成后点击<code>ESC</code>, 然后输入<code>:wq</code>保存退出.</p><p>然后更新环境变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入conda,检查是否配置成功。</p><h2 id="创建环境并安装PyTorch"><a href="#创建环境并安装PyTorch" class="headerlink" title="创建环境并安装PyTorch"></a>创建环境并安装PyTorch</h2><p>安装后一般应用栏里是没有这个软件的，需要在命令行中输入<code>anaconda-navigator</code>等待进入就可以了，然后点左方的environment然后点下方的加号创建环境，想个环境的名字，选择需要的python版本，这里也可以使用命令来创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n &lt;环境名&gt; python=3.8</span><br></pre></td></tr></table></figure><p>等待创建完成后在命令行中输入<code>conda info -e</code>即可查看现有哪些环境</p><p>然后进入相应的环境输入下面命令，其中这里使用的环境名为<code>env1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate env1</span><br></pre></td></tr></table></figure><p>即可激活，若为windows下则为<code>conda activate env1</code>。</p><p>这样就进入环境了，随后输入pytorch官网上的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</span><br></pre></td></tr></table></figure><p>如果速度慢，则需要换源，一般默认使用清华源为以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><strong>或者</strong>打开主目录下的隐藏文件<code>.condarc</code>，将其内容整体更换为以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssl_verify: true</span><br><span class="line">show_channel_urls: true</span><br><span class="line"></span><br><span class="line">channels:</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行 <code>conda clean -i</code> 清除索引缓存。</p><p>这时候安装命令就要把最后的<code>-c pytorch</code>去掉，变成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3</span><br></pre></td></tr></table></figure><p>就可以很快的下载了，也可以使用<a href="https://download.pytorch.org/whl/torch_stable.html">pytorch离线安装下载</a>直接下载whl文件，然后在命令行中进入下载的文件夹，然后输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch-<span class="number">1.9</span><span class="number">.0</span>+cu111-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure><p>这样就可以安装了，若为linux则将<code>win_amd64</code>改为<code>linux_x86_64</code>即可。</p><p>若为单次换下载换源则命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/  </span><br></pre></td></tr></table></figure><p>在后面加上需要安装的库名字即可。</p><h2 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h2><p>若全部安装完成，则新建一个python脚本hello.py，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">print(torch)</span><br><span class="line">print(torchvision)</span><br><span class="line">print(torch.cuda.is_available())</span><br><span class="line">x=torch.randn(5, 3)</span><br><span class="line">print(x)</span><br><span class="line">print(torch.cuda.device)</span><br><span class="line">print(torch.__version__)</span><br><span class="line">print(torchvision.__version__)</span><br><span class="line">print(torch.version)</span><br><span class="line">print(torch.version.cuda) # Corresponding CUDA version</span><br><span class="line">print(torch.backends.cudnn.version()) # Corresponding cuDNN version</span><br><span class="line">print(torch.cuda.get_device_name(0)) # GPU type</span><br></pre></td></tr></table></figure><p>即可查看详细情况，若cuda可用这里显示true就说明安装成功。</p><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><p>深度学习环境其他非常常用的软件一般还有VScode和Pychram，一般这两个都安装比较好。</p><p>BT下载以及磁力链下载很多时候是需要的，因此需要下载工具</p><p>下载工具可以用Free Download Manger，还是非常好用的，还有qbittorrent和Motrix作为备用下载软件，这两个软件下载后不用安装，需要用的时候打开，也非常不错。</p><p>其他比如截屏剪切板等功能用utools也挺好，不过高级功能后来收费了。</p><h2 id="windows下安装的差异"><a href="#windows下安装的差异" class="headerlink" title="windows下安装的差异"></a>windows下安装的差异</h2><h3 id="更新驱动"><a href="#更新驱动" class="headerlink" title="更新驱动"></a>更新驱动</h3><p>正常使用的话，下载GeForce Experience然后把驱动更新到最新版即可，或者手动下载驱动，没有特殊需要的话默认最新版就好。</p><h3 id="安装cuda和cudnn"><a href="#安装cuda和cudnn" class="headerlink" title="安装cuda和cudnn"></a>安装cuda和cudnn</h3><p>主体部分和linux下大同小异，按要求下载安装对应版本即可，安装cuda后打开命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>返回版本号说明安装cuda成功。</p><p>不过cudnn这里下载完后是复制到cuda对应的bin目录里面，一般是C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA。</p><p>安装后有时候不能使用则需要添加环境变量，在系统环境变量里的Path项下添加几个路径</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</p><p> 　　C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64</p><p>安装完成后进入路径然后运行测试，成功则为以下界面。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102138180.png" alt="11"></p><p>然后运行测试的代码即可。</p>]]></content>
    
    
    <summary type="html">一点小记录</summary>
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>考研后的思考</title>
    <link href="http://example.com/2021/12/29/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>http://example.com/2021/12/29/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/</id>
    <published>2021-12-29T00:08:37.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考研后的感想"><a href="#考研后的感想" class="headerlink" title="考研后的感想"></a>考研后的感想</h1><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>今天是考研后的第二天晚上，考研生活算是过去了，然后就是之后的新生活了，对于之后的安排，目前来看，主线是做毕业设计，在期间可以学习一些东西。我计划近期将之前做过的大作业再复习一遍，然后整理出来，发到博客里，这不是什么大的任务，我打算先从这样的小事做起，慢慢学知识。毕竟，在有目标的情况下很多时候还不一定能一直坚持做事，现在时间比较闲了，能做多少事就比较随缘了。</p>]]></content>
    
    
    <summary type="html">反内卷而不躺平</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>记录我的第一次搭建博客</title>
    <link href="http://example.com/2020/10/31/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/10/31/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-31T00:00:00.000Z</published>
    <updated>2024-03-02T17:19:40.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="艰难的第一次搭博客"><a href="#艰难的第一次搭博客" class="headerlink" title="艰难的第一次搭博客"></a>艰难的第一次搭博客</h1><p>其实我在很早之前就想搭博客，大概大一开始的时候，就想着做一些有意义，有兴趣的事，结果一直拖到了现在才开始真正意义上的实践，我也是趁着这次对大一的培训搭建博客，顺便才开始做，看上去不是很难的一件事，实际去做，我却遇到了很多困难，就光配置markdown的front-matter的时候，因为不知道里面还有其他东西，就一直报错，而且和其他一起弄的，我还找不到原因，就导致我花了很大的时间，最后遇到的一个问题是图片的在线存储问题，最后用的码云的仓库来放的，最后头像也解决了，我才能说，我基本才算是搭建成了一个基本的框架。<br>哎，之前跟现在相比，其实并不忙的，但也是懒，还有各种找的原因，结果到现在，对这样搭博客的基本知识都还都不太了解，有点小愧疚，以后还是得加把劲了。<br>现在还有一堆大作业要去写，剩下的时间也不多了，就先这样吧。</p>]]></content>
    
    
    <summary type="html">我太难了</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
