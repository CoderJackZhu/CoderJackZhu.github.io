<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习笔记记录感悟</title>
  
  <subtitle>不乱于心，不困于情，不念过往，不畏将来。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-09T14:32:27.935Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack Zhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客配置Github Actions和仓库分支存储实现自动化编译部署</title>
    <link href="http://example.com/2024/03/03/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEGithub%20Actions%E5%92%8C%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2024/03/03/Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEGithub%20Actions%E5%92%8C%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E9%83%A8%E7%BD%B2/</id>
    <published>2024-03-03T02:19:37.000Z</published>
    <updated>2024-04-09T14:32:27.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客配置Github-Actions和仓库分支存储实现自动化编译部署"><a href="#Hexo博客配置Github-Actions和仓库分支存储实现自动化编译部署" class="headerlink" title="Hexo博客配置Github Actions和仓库分支存储实现自动化编译部署"></a>Hexo博客配置Github Actions和仓库分支存储实现自动化编译部署</h1><p>这次的这个自动化其实是解决了一个大的问题，之前不带自动化的处理太麻烦了，而且加上之前也没配置好图床，导致每次写博客不仅要准备很久的材料，还要一张一张的上传照片获取链接，然后源文件建了一个github仓库，然后一个仓库只用作github pages，这样的话，每次写博客都要手动编译，使用<code>hexo g</code>然后<code>hexo d</code>，部署，最后使用另外一个仓库提交更改，然后commit，push到github pages仓库，这样很麻烦，所以我就想到了使用github actions自动部署博客，然后使用仓库分支存储图片等资源。（虽然不怎么写博客）<br>相信以后写文章方便之后一定能经常写（大概）。<br>这块我参考了之前浪潮的一次技术讲座，不过那个稍微麻烦了一些，我这里就简化了一下，做了个升级版。</p><h2 id="1-把源文件和github-pages的文件分开"><a href="#1-把源文件和github-pages的文件分开" class="headerlink" title="1.把源文件和github pages的文件分开"></a>1.把源文件和github pages的文件分开</h2><p>source文件和在github上编译好的github pages还是要区分开，这里选择的还是原来github pages的仓库，clone到本地后</p><p>随后建立静态界面的分支，同一个Bash窗口，键入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 你的Github用户名.github.io <span class="comment"># 进入博客仓库文件夹</span></span><br><span class="line">git branch html <span class="comment"># 新建静态页面分支，存放生成的博客页面</span></span><br></pre></td></tr></table></figure><h2 id="2-main分支文件修改"><a href="#2-main分支文件修改" class="headerlink" title="2. main分支文件修改"></a>2. main分支文件修改</h2><p>首先将你的仓库文件夹清空。</p><p>注：所有清空操作建议在Git Bash窗口中进行，键入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f * -r <span class="comment"># 强制递归清空仓库文件夹</span></span><br></pre></td></tr></table></figure><p>这样不会将.git&#x2F;文件夹中的仓库记录(这里此文件夹作为隐藏文件没有显示)删除，否则后续Git无法定位，也就无法继续操作<br>随后将之前博客的文件夹中的所有文件复制到这个仓库文件夹中，注意不要复制.git&#x2F;文件夹，因为这是仓库记录，复制后Git无法定位，也就无法继续操作；另外node_modules&#x2F;文件夹也不需要复制，因为这是node.js的依赖包，不需要上传到仓库中，不然可能会报错。</p><h2 id="3-推送main分支更改"><a href="#3-推送main分支更改" class="headerlink" title="3. 推送main分支更改"></a>3. 推送main分支更改</h2><p>回到仓库文件夹下的Git Bash窗口，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment"># 添加所有文件</span></span><br><span class="line">git commit -m <span class="string">&quot;update branch main&quot;</span> <span class="comment"># 提交更改</span></span><br><span class="line">git push <span class="comment"># 将修改推送到远程仓库</span></span><br></pre></td></tr></table></figure><h2 id="4-配置GiHub-Actions工作流文件"><a href="#4-配置GiHub-Actions工作流文件" class="headerlink" title="4. 配置GiHub Actions工作流文件"></a>4. 配置GiHub Actions工作流文件</h2><p>在仓库文件夹.github&#x2F;下新建一个目录workflows&#x2F;(注意有两层目录)，在里面新建一个hexo_build_deploy.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Build</span> <span class="string">&amp;</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="comment"># 触发事件</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="comment"># 排除分支</span></span><br><span class="line">    <span class="attr">branches-ignore:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作流</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">branch</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">          <span class="attr">with:</span></span><br><span class="line">            <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 工具安装</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">          <span class="attr">with:</span></span><br><span class="line">            <span class="attr">node-version:</span> <span class="string">&#x27;20&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">          <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">          <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 部署</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">          <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4.5.0</span></span><br><span class="line">          <span class="attr">with:</span></span><br><span class="line">            <span class="attr">branch:</span> <span class="string">html</span></span><br><span class="line">            <span class="attr">folder:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/20240303020755.png" alt="20240303020755"></p><h2 id="5-修改GitHub仓库设置"><a href="#5-修改GitHub仓库设置" class="headerlink" title="5.修改GitHub仓库设置"></a>5.修改GitHub仓库设置</h2><p>先在博客仓库Settings的Pages中将Branch设置为html<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/20240303020837.png" alt="20240303020837"></p><p>然后将Actions下的General中的Workflow permissons设置为Read and write permissions<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/20240303020935.png" alt="20240303020935"></p><h2 id="6-推送更改"><a href="#6-推送更改" class="headerlink" title="6. 推送更改"></a>6. 推送更改</h2><p>然后将更改推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="7-等待部署完成"><a href="#7-等待部署完成" class="headerlink" title="7. 等待部署完成"></a>7. 等待部署完成</h2><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/20240303021139.png" alt="20240303021139"><br>没有报错的话就完成了<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/20240303021234.png" alt="20240303021234"><br>https最好也打开。</p><h2 id="一些其他问题"><a href="#一些其他问题" class="headerlink" title="一些其他问题"></a>一些其他问题</h2><p>我在配置过程中碰到了一些其他问题，腾讯云配置DNS我开始弄的有点问题，就重新配的DNS Pod 。</p><p>除此之外，在配置的过程中node_modules是不需要的，我开始这里加了，后面报错，去掉就好了。</p><p>另外一个问题是我把源文件复制过去之后，最后部署完成之后网页是空白，最后发现是theme文件下的butterfly主题文件夹是空的，我把这个文件夹删了，然后重新clone了一遍butterfly主题，再部署就好了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.xdu-inspur.club/blog/site/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/get_a_blog.html#_7">https://www.xdu-inspur.club/blog/site/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/get_a_blog.html#_7</a></p>]]></content>
    
    
    <summary type="html">本文介绍如何使用Github Actions自动部署博客，并且使用仓库分支存储图片等资源。</summary>
    
    
    
    <category term="博客配置" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="博客配置" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>服务器常见技术问题与技巧</title>
    <link href="http://example.com/2023/09/03/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E8%A7%81%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2023/09/03/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E8%A7%81%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E4%B8%8E%E6%8A%80%E5%B7%A7/</id>
    <published>2023-09-03T12:29:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目前碰到的一些技术问题与知识"><a href="#目前碰到的一些技术问题与知识" class="headerlink" title="目前碰到的一些技术问题与知识"></a>目前碰到的一些技术问题与知识</h1><h2 id="ubuntu安装驱动时候出现的问题"><a href="#ubuntu安装驱动时候出现的问题" class="headerlink" title="ubuntu安装驱动时候出现的问题"></a>ubuntu安装驱动时候出现的问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo -e “blacklist nouveau\noptions nouveau modeset=0” &gt; /etc/modprobe.d/disable-nouveau.conf</span><br><span class="line">update-initramfs -u</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改启动参数:在GRUB菜单中选择Ubuntu启动选项，按下”e”键以编辑启动参数。尝试在命令行中添加”nomodeset”参数，然后按下F10键启动。</p><h2 id="ubuntu安装cuda驱动时候出现报错"><a href="#ubuntu安装cuda驱动时候出现报错" class="headerlink" title="ubuntu安装cuda驱动时候出现报错"></a>ubuntu安装cuda驱动时候出现报错</h2><ul><li>安装显卡驱动需要关闭图形界面，在命令行完成安装（提前下好安装包）<br>关闭图形界面</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl isolate multi-user.target</span><br></pre></td></tr></table></figure><p>开机可能出现黑屏，按<code>ctrl + shift + F2</code>即可进入命令行窗口，登录即可，随后安装驱动，安装完成之后，执行下边命令开机默认进入图形用户界面。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl isolate graphical.target</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/xiaoyuxin1/article/details/124526430">给Ubuntu安装驱动（nvidia）保姆级教程（方法一）_X.等雨停的博客-CSDN博客</a></p><h2 id="ubuntu拨号上网以及各种方式上网设置"><a href="#ubuntu拨号上网以及各种方式上网设置" class="headerlink" title="ubuntu拨号上网以及各种方式上网设置"></a>ubuntu拨号上网以及各种方式上网设置</h2><p>命令行输入即可进入图形管理界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm-connection-editor</span><br></pre></td></tr></table></figure><h2 id="ubuntu22-04-向日葵远程无法连接成功"><a href="#ubuntu22-04-向日葵远程无法连接成功" class="headerlink" title="ubuntu22.04 向日葵远程无法连接成功"></a>ubuntu22.04 向日葵远程无法连接成功</h2><p>需要切换桌面模式</p><h2 id="ubuntu机械盘挂载"><a href="#ubuntu机械盘挂载" class="headerlink" title="ubuntu机械盘挂载"></a>ubuntu机械盘挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建挂载路径</span></span><br><span class="line">sudo mkdir /data</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式化硬盘</span></span><br><span class="line">sudo mkfs -t ext4 /dev/sda</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">挂载硬盘</span></span><br><span class="line">sudo mount -t ext4 /dev/sda /data</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开机自动挂载</span></span><br><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在最后一行加入</span></span><br><span class="line">/dev/sda /data ext4  defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="使用yaml创建虚拟环境"><a href="#使用yaml创建虚拟环境" class="headerlink" title="使用yaml创建虚拟环境"></a>使用yaml创建虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">transformer</span></span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pytorch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">conda-forge</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">_libgcc_mutex=0.1=main</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">_openmp_mutex=4.5=1_gnu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">astor=0.8.1=py39h06a4308_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">autograd=1.3=pyhd3eb1b0_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pip:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">argparse==1.4.0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">einops==0.3.2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nystrom-attention==0.0.11</span></span><br><span class="line"><span class="attr">prefix:</span> <span class="string">/home/ps/anaconda3/envs/transformer</span></span><br></pre></td></tr></table></figure><p>最后的<code>prefix</code>指定环境位置</p><h2 id="使用-gitkeep文件保存空文件夹"><a href="#使用-gitkeep文件保存空文件夹" class="headerlink" title="使用.gitkeep文件保存空文件夹"></a>使用<code>.gitkeep</code>文件保存空文件夹</h2><h2 id="创建一个新的普通用户"><a href="#创建一个新的普通用户" class="headerlink" title="创建一个新的普通用户"></a>创建一个新的普通用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m ai -s /bin/bash</span><br><span class="line">sudo passwd ai</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo adduser ai sudo</span></span><br><span class="line">su ai</span><br></pre></td></tr></table></figure><ul><li>创建了可以登录的ai用户并使用&#x2F;bin&#x2F;bash作为shell。</li><li>设置密码。</li><li>为ai用户增加管理员权限。</li><li>切换登录用户为ai。</li></ul><h2 id="为普通用户添加sudo权限"><a href="#为普通用户添加sudo权限" class="headerlink" title="为普通用户添加sudo权限"></a>为普通用户添加sudo权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为用户username添加sudo权限</span></span><br><span class="line">sudo usermod -a -G sudo username</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去除用户username的sudo权限</span></span><br><span class="line">sudo usermod -G usergroup username</span><br></pre></td></tr></table></figure><p>给用户授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groups ai</span><br><span class="line">usermod -aG sudo meow</span><br><span class="line">visudo</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo deluser --remove-home ai</span><br></pre></td></tr></table></figure><p>删除用户目录</p><p>查看所有用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep bash /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="linux新建用户也使用原来conda环境"><a href="#linux新建用户也使用原来conda环境" class="headerlink" title="linux新建用户也使用原来conda环境"></a>linux新建用户也使用原来conda环境</h2><p>a用户下安装anaconda，默认地址不变，b用户直接不可用，在b用户登录的终端编辑b用户的<code>.bashrc</code>文件，在文档最后一行加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/home/&lt;Username&gt;/anaconda3/bin</span><br></pre></td></tr></table></figure><p>保存退出，并<code>source .bashrc</code>，然后<code>conda init</code>就可以了</p><p>高级配置参考<a href="https://zhuanlan.zhihu.com/p/570747928?utm_id=0">Anaconda 多用户共享安装（Ubuntu） - 知乎 (zhihu.com)</a></p><h2 id="给用户授予docker使用权限"><a href="#给用户授予docker使用权限" class="headerlink" title="给用户授予docker使用权限"></a>给用户授予docker使用权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a $USER docker </span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p><code>$USER</code>可以更换为其他，不换就是默认的。第二步有可能需要输密码，然后输入会发现错误，其实是没有设置密码，需要先设置密码，然后这样更新组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h2 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h2><p>方便的查看系统的工具</p><h2 id="卸载图形界面"><a href="#卸载图形界面" class="headerlink" title="卸载图形界面"></a>卸载图形界面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove gnome-shell</span><br><span class="line">sudo apt-get remove gnome </span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get purge gnome</span><br><span class="line">sudo apt-get autoclean</span><br><span class="line">sudo apt-get clean</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@服务器IP</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lscpu</span><br></pre></td></tr></table></figure><h2 id="cudnn-source-problem"><a href="#cudnn-source-problem" class="headerlink" title="cudnn source problem"></a>cudnn source problem</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">W: GPG error: file:/var/cudnn-local-repo-ubuntu2004-8.6.0.163  InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 323547C4B0FE0A41</span><br><span class="line">E: The repository &#x27;file:/var/cudnn-local-repo-ubuntu2004-8.6.0.163  InRelease&#x27; is not signed.</span><br><span class="line">N: Updating from such a repository can&#x27;t be done securely, and is therefore disabled by default.</span><br><span class="line">N: See apt-secure(8) manpage for repository creation and user configuration details.</span><br></pre></td></tr></table></figure><p>then input <code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 323547C4B0FE0A41</code> to solve the problem.</p><p>But it doesn’t work. You can follow the steps below to solve the problem.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /var/cudnn-local-repo-ubuntu2004-8.4.1.50/*.gpg /usr/share/keyrings/</span><br></pre></td></tr></table></figure><p>复制到&#x2F;usr&#x2F;share&#x2F;keyrings即可。</p><h2 id="两个盘软raid命令"><a href="#两个盘软raid命令" class="headerlink" title="两个盘软raid命令"></a>两个盘软raid命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mdadm</span><br><span class="line">#格式化两块硬盘</span><br><span class="line">#sudo mkfs.ext4 -F /dev/sdb</span><br><span class="line">#sudo mkfs.ext4 -F /dev/sdc</span><br><span class="line">#mdadm管理 raid0</span><br><span class="line">sudo mdadm --create --verbose /dev/md0 --level=0 --raid-devices=2 /dev/sd&#123;b,c&#125;</span><br><span class="line">#格式化并挂载</span><br><span class="line">sudo mkfs.ext4 -F /dev/md0 sudo mkdir -p /home/md0 sudo mount /dev/md0 /home/md0</span><br></pre></td></tr></table></figure><h2 id="每隔时间杀程序"><a href="#每隔时间杀程序" class="headerlink" title="每隔时间杀程序"></a>每隔时间杀程序</h2><p>kill_python.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ true ];do</span><br><span class="line">sleep 5</span><br><span class="line">ps -ef |grep -w  python |grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>然后再讲其添加到crontab中，执行crontab -e，添加如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/30 * * * * /usr/bin/sh /aa/bb/cleanFfmpegProcess.sh</span><br></pre></td></tr></table></figure><p>:wq即可。</p><h2 id="关闭服务器自动休眠"><a href="#关闭服务器自动休眠" class="headerlink" title="关闭服务器自动休眠"></a>关闭服务器自动休眠</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target</span><br></pre></td></tr></table></figure><p>查看系统休眠状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status sleep.target</span><br></pre></td></tr></table></figure><h2 id="设置github的ssh连上github"><a href="#设置github的ssh连上github" class="headerlink" title="设置github的ssh连上github"></a>设置github的ssh连上github</h2><p>生成ssh key</p><p>读取公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制粘贴到github。github配置ssh key的地方在<br><a href="https://github.com/settings/keys">https://github.com/settings/keys</a></p><p>测试ssh key是否配置成功，在linux开发机上输入<br>$ ssh -T <a href="mailto:git@github.com">git@github.com</a></p><p>如果出现Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github</p><p>3、配置git的用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;your name&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>以后可以通过git config –global -l来查看全局设置，git config –global -e来编辑</p><h2 id="更新包导致cuda和驱动版本不对应，NVIDIA-SMI-has-failed-because-it-couldn‘t-communicate-with-the-NVIDIA-driver"><a href="#更新包导致cuda和驱动版本不对应，NVIDIA-SMI-has-failed-because-it-couldn‘t-communicate-with-the-NVIDIA-driver" class="headerlink" title="更新包导致cuda和驱动版本不对应，NVIDIA-SMI has failed because it couldn‘t communicate with the NVIDIA driver"></a>更新包导致cuda和驱动版本不对应，NVIDIA-SMI has failed because it couldn‘t communicate with the NVIDIA driver</h2><p>终端nvidia-smi出现这样，<strong>是内核版本更新的问题，导致新版本内核和原来显卡驱动不匹配</strong></p><p>查看已安装内核</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections |grep linux-image</span><br></pre></td></tr></table></figure><p>查看正在使用的内核</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>利用命令 <code>ll /usr/src/</code> 可查看下面有一个nvidia-470.82.00文件夹，版本号因电脑而异。</p><p>只需执行两条命令就好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dkms</span><br><span class="line">sudo dkms install -m nvidia -v 470.82.00</span><br></pre></td></tr></table></figure><p>（470.82.00表示的是驱动版本号）</p><h3 id="禁止内核自动更新"><a href="#禁止内核自动更新" class="headerlink" title="禁止内核自动更新"></a>禁止内核自动更新</h3><p>1）命令行关闭系统自动更新，使用命令打开文件并编辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/apt.conf.d/<span class="number">10</span>periodic</span><br></pre></td></tr></table></figure><p>将双引号中的“1”全部置“0”即可，修改后保存。</p><p>ubuntu默认启动了自动更新内核，为了避免出现重启系统后遇到错误进入不到系统中去，我们可以进一步关闭内核更新，使用当前内核。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-mark hold linux-image-generic linux-headers-generic </span><br><span class="line">linux-image-generic set on hold.</span><br><span class="line">linux-headers-generic set on hold.</span><br></pre></td></tr></table></figure><p>如果要重启启动内核更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-mark unhold linux-image-generic linux-headers-generic</span><br></pre></td></tr></table></figure><h2 id="文件格式问题"><a href="#文件格式问题" class="headerlink" title="文件格式问题"></a>文件格式问题</h2><p>qsub:script is written in DOS&#x2F;Windows text format</p><p>dos格式文件传输到unix系统时，会在每行的结尾多一个^M（&#x2F;r），当然也有可能看不到。但是在vim的时候，会在下面显示此文件的格式，比如 “dos.txt” [dos] 120L, 2532C 字样,表示是一个[dos]格式文件，如果是MAC系统的，会显示[MAC]。因为文件格式的原因有时会导致我们的unix程序，或者shell程序出现错误，那么需要把这些dos文件格式转换成unix格式，方法是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim dos.txt</span><br><span class="line">:set fileformat=unix</span><br><span class="line">:w</span><br></pre></td></tr></table></figure><h2 id="centos7安装驱动"><a href="#centos7安装驱动" class="headerlink" title="centos7安装驱动"></a>centos7安装驱动</h2><p><a href="https://www.cnblogs.com/2012blog/p/9431432.html">https://www.cnblogs.com/2012blog/p/9431432.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="彻底卸载wsl"><a href="#彻底卸载wsl" class="headerlink" title="彻底卸载wsl"></a>彻底卸载wsl</h2><p>在powerShell上<br>先看还有哪些子系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --all</span><br></pre></td></tr></table></figure><p>注销子系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h2 id="只读文件系统"><a href="#只读文件系统" class="headerlink" title="只读文件系统"></a>只读文件系统</h2><p>在linux硬盘挂载时候，部分情况磁盘变成ro只读而不是rw<br>一般df查看挂载设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount -i 挂载路径</span><br></pre></td></tr></table></figure><p>rm -rf 目录&#x2F;文件</p><p>在部分情况下，先使用windows系统，后使用linux，可能有系统挂载问题，即使chmod 777 也没用，出现错误：</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/image2.png" alt="image"><br>需要重新挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sda2</span><br></pre></td></tr></table></figure><p>报错target busy<br>杀死使用该目录的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser  -<span class="built_in">mv</span> -k /dev/sda2</span><br></pre></td></tr></table></figure><p> 再次卸载，卸载成功后重新挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda2 /data</span><br></pre></td></tr></table></figure><p>报错解决：<br>报错1：“The disk contains an unclean file system (0, 0). Metadata kept in Windows cache, refused to mount. Falling back to read-only mount because the NTFS partition is in an unsafe state. Please resume and shutdown Windows fully (no hibernation or fast restarting.)”。说明是NTFS分区格式错误<br>解决方法：ntfsfix修复，需要安装工具：<br>sudo apt-get install ntfs-3g<br>安装完成后进行ntfsfix修复：<br>sudo ntfsfix &#x2F;dev&#x2F;sda2<br>提示修复成功。                        </p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/image3.png" alt="image3"></p><p>报错2：“没有那个文件或目录”。说明&#x2F;data目录不存在，需要创建。<br>解决方法：media根目录下创建新目录：<br>mkdir &#x2F;media&#x2F;jngk&#x2F;data<br>然后重新挂载，即可挂载成功。<br>mount &#x2F;dev&#x2F;sda2 &#x2F;media&#x2F;jngk&#x2F;data<br>现在该目录就不是只读文件系统了，在该目录下右键，新建文件夹选项也不再是灰色不可选状态了。</p><h1 id="无法将“XXX”项识别为-cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次"><a href="#无法将“XXX”项识别为-cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次" class="headerlink" title="无法将“XXX”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次"></a>无法将“XXX”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次</h1><p>进入PowerShell 模式<br>Get-ExecutionPolicy -List 查看当前所有作用域<br>1</p><p>上图显示就最后一个作用域有权限，其他作用域都没有权限，那么我们就需要去给它设置权限</p><p>设置权限<br>Set-ExecutionPolicy RemoteSigned -Scope &lt; scopeName &gt;,设置当前用户作用域具备权限，具体设置格</p><p>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser<br>1</p><p>按照上面的格式，执行需要加权限的作用域，然后再去尝试之前的方法，发现就不会报错提示了。</p><h1 id="挖矿病毒处理"><a href="#挖矿病毒处理" class="headerlink" title="挖矿病毒处理"></a>挖矿病毒处理</h1><p>找到病毒文件：</p><p>方法一：由于入侵者对程序的名称做了伪装，无法直接通过其进行查找。因此使用PID入手，查找其在&#x2F;proc里的文件，进而发现了关键路径</p><p>将所有病毒文件展示出来，可以发现关键词miner</p><p>对里面的文件作进一步的查看，可以看到ETH（以太坊）、POOL、WALLET等关键词，实锤中了挖矿病毒</p><p>此外，查看run文件，可以发现这个病毒文件确实做了伪装</p><p>方法二：考虑到入侵者可能会用某些方式将病毒程序作一定的隐藏，这里通过查看用户的计划任务来定位病毒文件，因为病毒文件可能被kill掉而入侵者不会每次都自己手动启动的，肯定会设置自动启动。查看计划任务的命令为crontab -l<br>为了查看病毒文件在服务器上是否有多份，可以使用如下命令一次性查看所有用户的计划任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> $(<span class="built_in">cat</span> /etc/passwd | <span class="built_in">cut</span> -d<span class="string">&quot;:&quot;</span> -f1)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$u</span>&gt;&gt;temp.txt</span><br><span class="line">    crontab -l -u <span class="variable">$u</span> &gt;&gt; temp.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">cat</span> temp.txt</span><br><span class="line"><span class="built_in">rm</span> temp.txt</span><br></pre></td></tr></table></figure><p>方法三：尝试定位病毒文件中的特有关键词，比如“miner”<br>updatedb<br>locate miner</p><h1 id="由于locate命令不能查找-x2F-dev-x2F-shm之类的路径，以防万一可以使用find命令，不过会很慢"><a href="#由于locate命令不能查找-x2F-dev-x2F-shm之类的路径，以防万一可以使用find命令，不过会很慢" class="headerlink" title="由于locate命令不能查找&#x2F;dev&#x2F;shm之类的路径，以防万一可以使用find命令，不过会很慢"></a>由于locate命令不能查找&#x2F;dev&#x2F;shm之类的路径，以防万一可以使用find命令，不过会很慢</h1><h1 id="find-x2F-name-miner"><a href="#find-x2F-name-miner" class="headerlink" title="find &#x2F; -name miner"></a>find &#x2F; -name miner</h1><p>应对方法：</p><p>删除整个病毒文件夹（python），kill相关的PID，并删除相关定时任务（使用命令crontab -e，或者如果只有一个定时任务的话可以用命令crontab -r）</p><p>更改所有用户的密码，并设置一定的密码复杂度（可以使用cracklib）</p><p>移除所有除了管理员以外用户的sudo权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">admin=<span class="string">&quot;root,sudo,%sudo&quot;</span> <span class="comment"># 填入管理员账号（前三个不能删）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">cat</span> /etc/sudoers|grep  <span class="string">&quot;ALL=(ALL:ALL) ALL&quot;</span>|<span class="built_in">cut</span> -f 1|<span class="built_in">cut</span> -f 1 -d <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="subst">$(echo $admin|grep $i)</span>&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;*** deluser <span class="variable">$i</span> sudo&quot;</span></span><br><span class="line">        deluser <span class="variable">$i</span> sudo</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(getent group sudo|<span class="built_in">cut</span> -f 4 -d :|<span class="built_in">tr</span> -s <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="subst">$(echo $admin|grep $i)</span>&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;*** deluser <span class="variable">$i</span> sudo&quot;</span></span><br><span class="line">        deluser <span class="variable">$i</span> sudo</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>删除现有的所有密钥&amp;授权</p><p>updatedb</p><h1 id="删除公钥-密钥"><a href="#删除公钥-密钥" class="headerlink" title="删除公钥+密钥"></a>删除公钥+密钥</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pub <span class="keyword">in</span> $(locate .pub|grep .pub$)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    u=$(ll <span class="variable">$pub</span>|awk <span class="string">&#x27;&#123;printf $3&#125;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 根据UID判断所属用户是否为普通用户</span></span><br><span class="line">    <span class="keyword">if</span> [ 999 -lt $(<span class="built_in">id</span> -u <span class="variable">$u</span>) ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            pri=$(<span class="built_in">echo</span> <span class="variable">$&#123;pub%????&#125;</span>)</span><br><span class="line">            <span class="built_in">rm</span> <span class="variable">$pub</span></span><br><span class="line">            <span class="built_in">rm</span> <span class="variable">$pri</span></span><br><span class="line">            <span class="built_in">echo</span> del  <span class="variable">$u</span> <span class="variable">$pub</span> <span class="variable">$pri</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> save <span class="variable">$u</span> <span class="variable">$pub</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 删除knowN_hosts</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(locate known_hosts|grep known_hosts$)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">rm</span> <span class="variable">$i</span></span><br><span class="line">    <span class="built_in">echo</span> del <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 删除authorized_keys</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(locate authorized_keys|grep authorized_keys$)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">rm</span> <span class="variable">$i</span></span><br><span class="line">    <span class="built_in">echo</span> del <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="查看剩余"><a href="#查看剩余" class="headerlink" title="查看剩余"></a>查看剩余</h1><p>updatedb<br>locate .pub|grep .pub$<br>locate known_hosts<br>locate authorized_keys</p><p>可能会遇到某个文件用root权限也删除不了</p><p>如果使用命令lsattr发现该文件的隐藏属性中存在除了e以外的属性，则用命令chattr来移除这些属性</p><p>设置远程连接只能使用密钥，不能使用密码</p><p>禁止使用root账号进行远程连接</p><p>使用终端安全杀毒软件、内网安全监控产品、漏洞扫描设备等专业工具</p><h2 id="查杀病毒"><a href="#查杀病毒" class="headerlink" title="查杀病毒"></a>查杀病毒</h2><p>1、crontab -e 发现一条自启动任务，且为“python”程序，但不确定是否为挖矿程序，暂时保留<br>2、根据挖矿程序PID，进入&#x2F;proc&#x2F;PID目录下检查<br>进入&#x2F;tmp&#x2F;…&#x2F;Python目录<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/image4.png" alt="image4"><br>通过sudo vim config.ini检查config.ini文件，发现正是挖矿配置文件，从而自启动任务为挖矿任务<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/image5.png" alt="image5"><br>4、kill挖矿进程，删除挖矿文件及自启动任务，同时关闭挖矿病毒使用的端口<br>5、使用杀毒软件全盘查杀</p><h2 id="在cuda版本过高的情况nvidia官方bug，会出现内存泄露no-such-progress"><a href="#在cuda版本过高的情况nvidia官方bug，会出现内存泄露no-such-progress" class="headerlink" title="在cuda版本过高的情况nvidia官方bug，会出现内存泄露no such progress"></a>在cuda版本过高的情况nvidia官方bug，会出现内存泄露no such progress</h2><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --upgrade nvidia-ml-py</span><br></pre></td></tr></table></figure><h2 id="fsl-安装"><a href="#fsl-安装" class="headerlink" title="fsl 安装"></a>fsl 安装</h2><p>使用本地安装包<br>解压缩到要安装的文件夹。推荐和我一样解压缩到&#x2F;usr&#x2F;local目录下<br>有可能会出现权限不足的问题无法解压缩，可以在usr目录中打开终端，输入<br>sudo chmod -R 777 local<br>输入密码后，打开权限<br>配置环境变量.bashrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export FSLDIR=/usr/local/fsl</span><br><span class="line">export PATH=$PATH:$FSLDIR/bin</span><br><span class="line">source $FSLDIR/etc/fslconf/fsl.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="卸载cuda"><a href="#卸载cuda" class="headerlink" title="卸载cuda"></a>卸载cuda</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/cuda-xx.x/bin/</span><br><span class="line">sudo ./cuda-uninstaller</span><br><span class="line">sudo rm -rf /usr/local/cuda-xx.x</span><br></pre></td></tr></table></figure><h1 id="微星tpm"><a href="#微星tpm" class="headerlink" title="微星tpm"></a>微星tpm</h1><p>微星gl63有TPM的，下面教你如何操作：<br>首先进bios<br>然后按右边的CTRL+SHIFT+左边的ALT+F2开启超级模式。<br>之后在高级选项中找到PCH-FW Configuration<br>找到PTT Configuratio<br>把dTPM改为PTT（如果已经是PTT可以跳过此步）。<br>之后在高级选项中找到Trusted Computing<br>找到Security Device Support，将Disable改为Enable<br>按F10保存。</p>]]></content>
    
    
    <summary type="html">本文记录了一些常见的技术问题与技巧</summary>
    
    
    
    <category term="技术问题" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="技术问题" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浅谈《原神》游戏的理解</title>
    <link href="http://example.com/2023/02/07/%E6%B5%85%E8%B0%88%E3%80%8A%E5%8E%9F%E7%A5%9E%E3%80%8B%E6%B8%B8%E6%88%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2023/02/07/%E6%B5%85%E8%B0%88%E3%80%8A%E5%8E%9F%E7%A5%9E%E3%80%8B%E6%B8%B8%E6%88%8F%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2023-02-07T00:00:00.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈《原神》游戏的理解"><a href="#浅谈《原神》游戏的理解" class="headerlink" title="浅谈《原神》游戏的理解"></a>浅谈《原神》游戏的理解</h1><h2 id="关于游戏本身"><a href="#关于游戏本身" class="headerlink" title="关于游戏本身"></a>关于游戏本身</h2><p>游戏本身而言是全平台兼容的角色扮演（RPG）游戏，在更多的时候是划分在手游类别的，在手游中属于天花板的水平，但是相比于很多主机游戏以及部分买断制游戏如埃尔登法环、赛博朋克2077、荒野大镖客等游戏还是有不小的差距。作为一款国产二次元游戏，该游戏做的已经很不错了，自从游戏发布以来，月充值流水屡创新高，小部分的重度氪金用户支撑起了大部分的零氪玩家，不氪金也可以体验到游戏的所有内容和大部分游戏体验，氪金的点主要就在于角色和武器需要抽取，而抽取的成本不低，16元一抽，在非常特殊的情况下甚至需要两千多元才能抽取到一个角色，这也是游戏被诟病的主要一点。</p><h2 id="对于游戏受众"><a href="#对于游戏受众" class="headerlink" title="对于游戏受众"></a>对于游戏受众</h2><p>对于游戏受众而言，可以在游戏中体验到不同的国家，在扮演旅行者的过程中体验到多种多样的内容，很多人是冲着游戏角色来的，也有很多是体验高质量的画风等等。</p><p>游戏好的一点是游戏属于内容制作型，属于PVE即玩家对战环境，这样玩家与玩家之间不存在什么竞争关系，这样使得游戏的风气是非常和谐的，在这么长时间的游戏过程中和很多玩家交流，都是非常热心帮忙的，大佬后期长草经常会帮新玩家探索打boss等等；而很多游戏都是属于PVP，即玩家和玩家对战，这样的竞技性游戏很多时候几乎每次玩都会见到互相骂的情况。相比之下，原神游戏的环境还是好了太多。</p><p>相比于买断制游戏，这种无门槛体验所有内容的方式还是更适应实际的需要，很多人天天呼吁买断制如何好，然而叫好不叫座，动辄数百元的游戏，还没开始玩就要先花几百元，还不知道好不好以及能不能玩得来，成本还是太高了，所谓的外国人更喜欢3A大作也并没有，原神在海外的流水也非常高，也很受国外玩家喜爱。对于很多游戏玩家，不仅有很多买断游戏，也在原神中氪金了很多，很多游戏都玩，也有了不同的游戏体验。</p><p>除此之外，游戏制作中还花重金在音乐和画面上，在游戏中也能体验到各国传统的音乐，相关音乐很多时候都是各国的交响乐团演奏的，制作品质不低，高雅的艺术也变得易于接受和体验，对于玩家而言也是很不错的。游戏的制作过程中也发扬了部分中国传统文化，将很多传统傩舞戏剧等内容加入游戏，将非常晦涩难以接近体验的传统文化变得通俗易接受，也让外国人了解到这些内容，虽然不能完全成为文化输出，但是让外国人了解到这些，甚至进一步加深了解还是很好的，相比之前大价钱在各国建设孔子学院而收效甚微，这种潜移默化的方式还是更容易接受，也赚得了外国人的钱。虽然米哈游作为一个公司也是要盈利，但是在盈利的过程中确实对于中国文化的输出起到了一点的作用，这点也是值得肯定的。</p><h2 id="对于网络喷子"><a href="#对于网络喷子" class="headerlink" title="对于网络喷子"></a>对于网络喷子</h2><p>一部分网络喷子的关注点在于《原神》的全平台兼容性，全平台中很多玩家都是手游玩家，而很多玩家是PC玩家或者主机玩家，在游戏圈中存在着所谓的鄙视链，即主机&gt;PC&gt;手游，这种鄙视究其根本在于经济基础，一般家庭很少会有花几千元买游戏机；个人电脑适用性较广；手游成本最低，可以玩手游的人最为广泛。《原神》更多的时候是作为手游来比较，因此很多时候处于鄙视圈底层。这种鄙视深究可以发现，相比人种歧视，很多时候贫富差距的歧视以及地域歧视都不容忽略。</p><p>另一部分原因是由于游戏做的过于好，游戏质量之高远高于之前的其他很多游戏，游戏火出圈后就存在几种问题：</p><ol><li>很多人接触的游戏都是较少的，只有主流的《王者荣耀》、《和平精英》、《英雄联盟》或者吃鸡、守望、CF、csgo等等，部分游戏质量并不高，但是基于社交的游戏更符合大众推广，哪怕游戏质量一般，但是《原神》在手游上的天花板让很多人第一次接触到很好玩的游戏，日常痴迷甚至到处开喷说不如原神，在和《原神》毫无关系的地方刷游戏的相关内容或者引战。</li><li>游戏玩家数量过多导致的问题就是受众过于广泛，作为一款12+的游戏，游戏中可能有小中学生到高中大学生，再到不同年龄阶段和不同文化水平的人，俗话说林子大了什么鸟都有，存在部分不理智的玩家也很正常，这种就类似于一个地区的人有个别不文明就直接认为整个地区的人都有问题，这样的玩家毕竟是少数。很多游戏如英雄联盟等有时候玩家也会有不理智的行为，也不会有很多人认为这一群体就有问题了，同样也是受众广泛，表现很多时候并不同。</li><li>游戏质量高对于竞争对手的压力，相比之前的很多游戏，这都算是降维打击，演示的视频就是实际实机视频，这种就类似于吃了一碗红烧牛肉面，打开方便面发现包装和实物一样，这种在手游中从未遇到过，导致竞品难以望其项背，相比于投巨资做同等级别的游戏还可能竞争不过，抹黑反串引战已经是成本最低的最优解了，因此从两年半前游戏发布以及游戏刚出之前很多媒体都声称黑暗降临，至今很多都在抹黑并在各种无关的地方刷相关内容，或者取相关的名字换头像，然后发引战言论，这也就是最初所谓op的由来。</li><li>很多玩家的跟风心理，部分玩家也没玩过很多游戏，也没体验过《原神》，但是经常在很多地方刷到相关的反对言论就认为游戏如何不好，低人一等并鄙视玩游戏的人，很多这种人都是心智不成熟，玩游戏还能玩出优越感，也有的这些人后来也开始玩原神，也是出于跟风心理，不过这也正常，毕竟很多人都是这样的。</li><li>部分玩家的崇洋媚外心理，认为外国人做的东西就是好的，中国人做的就是不好的，就要抹黑，然而在国外，现在已经过去了两年半，《原神》游戏的流水还是很高，热度也不断，移动端2022年就超过了190亿，实际而言，身边玩原神的很多，大部分都不是手游玩家，实际流水要高很多，游戏质量得到了肯定。在国外都很受欢迎证明外国人也肯定，那么很多时候在国内黑的更多可能会有点奇怪。</li></ol><h2 id="对玩家潜在的风险"><a href="#对玩家潜在的风险" class="headerlink" title="对玩家潜在的风险"></a>对玩家潜在的风险</h2><p>游戏制作较为精美，而且属于角色扮演类型的游戏可能会导致的问题有以下几点：</p><ol><li>游戏较为精美而容易沉溺于虚拟世界，一玩就会花去很多时间，导致用于平时生活的时间减少，相比于很多游戏而言，《原神》用于每日基本任务等内容的时间约为半小时，加上活动抽时间做，实际而言消耗的时间并不是很严重的问题。</li><li>游戏中角色可以见到多样的世界，扮演能力强大的旅行者，而这种体验是在现实生活中不可能体验到的，出于人类的本能，这种落差是肯定会面对的，很多时候游戏玩家每天会花更多的精力在游戏中，进而影响现实生活。</li><li>游戏虽然可以联机，但是主要玩法和内容都是单机游戏，这种在互联网时代普遍存在的问题更严重了：缺乏和人的交流，更多的和游戏内探索互动，可能导致和人交往的能力下降，性格内向以及部分性格障碍，这种潜在的问题对于部分人而言是有影响的。</li><li>游戏的一大卖点在于人物角色，人物的塑造，声音以及服装的设计是非常优秀的。实事求是的来说，一定程度的软色情，很多时候经常“老婆”的这样叫着，很多时候是出于图一乐的心理，但是有时候也会有不小的问题。游戏中的角色很多时候都有一定的人设和意义，代表着一定的特点，很多时候都是较为完美的，让人非常喜爱，但是过于沉迷于虚拟的人往往会提高人的阈值，这样在现实生活中见到正常人都是不完美的时候产生的巨大落差有可能会使得不能很好的面对现实生活中的人。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这些更多的是为了树立一个正确的思想，《原神》也不可能非常完美，但是为了黑而黑或者跟风输出可能并没有什么意义，游戏作为日常生活的一个调剂，适度游戏放松也是很好的，过于沉迷游戏而忽略现实生活则会带来问题，游戏只是个工具，想玩什么就玩什么，但是借此非要打个标签就没必要了，愿读者也有正确的价值观。</p>]]></content>
    
    
    <summary type="html">一点点的理解</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>ActionFormer论文分享</title>
    <link href="http://example.com/2022/11/09/%E5%AD%A6%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%88%86%E4%BA%ABActionFormer/"/>
    <id>http://example.com/2022/11/09/%E5%AD%A6%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%88%86%E4%BA%ABActionFormer/</id>
    <published>2022-11-09T18:01:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ActionFormer论文分享"><a href="#ActionFormer论文分享" class="headerlink" title="ActionFormer论文分享"></a>ActionFormer论文分享</h1><p>由于水平有限，讲的内容也可能会出现不是很正确的地方，欢迎大家批评指正，沟通交流。今天给大家分享的是之前做过的项目中使用到的一个模型，这个模型在时序定位中取得了非常好的效果，这是Papers with Code上在THUMOS14数据集上的结果，当后面几名还是相差一个点的时候，已经比第二名领先了十多个点，因此我拿来分享一下这个模型，讲一下关于模型的结构以及使用感受。</p><h2 id="ActionFormer在THUMOS‘14效果"><a href="#ActionFormer在THUMOS‘14效果" class="headerlink" title="ActionFormer在THUMOS‘14效果"></a>ActionFormer在THUMOS‘14效果</h2><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/tal_pwc.png" alt="image-20221106153056010"></p><h2 id="视频领域常用的数据集"><a href="#视频领域常用的数据集" class="headerlink" title="视频领域常用的数据集"></a>视频领域常用的数据集</h2><p><strong>THUMOS14：</strong>数据集包含大量的人类动作在真实环境中开源视频。 动作包括日常生活动作。THUMOS14的主要挑战是动作实例持续时间的巨大变化。具体来说，短动作实例只能持续十分之一秒，而长动作实例可以持续数百秒。</p><p><strong>ActivityNet ：</strong>是目前视频动作分析方向最大的数据集，包含分类和检测两个任务。目前的1.3版本有200个类别，涵盖了200种不同的日常活动。</p><p><strong>EPIC Kitchens 100：</strong>记录了多个多角度、无脚本、本地环境中的厨房场景。它们均来自拍摄者真实的日常饮食生活，并且使用了一种新颖的实时音频评论方法来收集注释。</p><h2 id="时序定位任务"><a href="#时序定位任务" class="headerlink" title="时序定位任务"></a>时序定位任务</h2><p>动作识别可以看作是一个纯分类问题，其中要识别的视频基本上已经过剪辑，即每个视频包含一段明确的动作，视频时长较短，且有唯一确定的动作类别。而在时序动作定位领域，视频通常没有被剪辑，视频时长较长，动作通常只发生在视频中的一小段时间内，视频可能包含多个动作，也可能不包含动作，即为背景。找到视频中动作的起始和结束，很多时候还需要找出其中动作属于哪一类。这一任务类似于时间上的目标检测，因此很多目标检测中的方法也常常拿来应用在这一领域，比如Faster-RCNN中两阶段的思想，先找到候选区域，再筛选，回归修正。有基于滑窗的方法，基于候选区域的方法。而本次讲的ActionFormer则是单阶段无锚框的方法，如图中所示，直接通过Transformer模型预测出每一刻的动作类别和他们这一时间点到动作开始和结束的距离。</p><h2 id="ActionFormer模型结构"><a href="#ActionFormer模型结构" class="headerlink" title="ActionFormer模型结构"></a>ActionFormer模型结构</h2><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/base_ActionFormer.png" alt="image-20221106155642020"></p><p>这一模型使用分类分数以及回归分数来计算出动作的情况，分类的分数用于对动作进行分类，回归的分数用于回归出动作的开始和结束的时间点，这个过程就有点像目标检测，事实上，时序定位的很多方法都是从目标检测中借鉴过来的，这里的分类和回归也就像目标检测中找到锚框中目标的类别和对锚框体的回归，不过时序定位的这个任务是在时间上一维的。</p><h3 id="总体结构、输入输出"><a href="#总体结构、输入输出" class="headerlink" title="总体结构、输入输出"></a>总体结构、输入输出</h3><p>模型的输入是首先对视频经过特征提取，根据视频的长度处理成很多个向量，随后把特征向量送入网络，网络的开始是使用卷积进行映射，随后是一个Transformer结构作为编码器，经过这个结构之后，使用了一个轻量级的卷积进行解码，最后使用分类和回归头得到每个时刻的预测类别，开始和结束，最后通过转化变成预测的结果。</p><p>在送入模型训练的时候，只有特征向量是不行的，还是需要一些信息的，比如训练的时候就需要标注信息，片段的起始和末尾，所属的类型，划分为训练还是测试，视频的持续时间和fps帧率信息，在测试的时候不需要标注信息，但是关于视频的帧率和持续时间这些信息还是需要的。</p><p>对于模型的输出，我们需要的是一段时间的开始时刻，结束时刻以及对应的分类，因此问题可以转化为</p><p>对于时间上的每一个时刻，预测出$p(a_t),d^s_t,d^e_t$，其中$p(a_t)$包含C个值，随后使用以下的公式来求出该时刻预测的结果</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/tal_input.png" alt="image-20221106155554231"></p><p>具体的结构可以划分为以下几个部分：</p><ul><li><p><strong>特征提取</strong></p></li><li><p><strong>使用卷积进行映射</strong></p></li><li><p><strong>Transformer编码器</strong></p></li><li><p><strong>卷积网络解码</strong></p></li><li><p><strong>分类和回归头</strong></p></li><li><p><strong>损失计算</strong></p></li></ul><p>接下来我讲详细讲这几个部分。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/action_structure.png" alt="image-20221106160221382"></p><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>特征提取是视频领域常用的操作，因为视频相比图片来说信息量更大，而且视频中存在着非常多的信息冗余，如果直接把视频放入网络，计算量也会很高，因此很多任务会使用特征提取后的特征进行处理。</p><p>使用预训练好的模型进行特征提取，一般常用双流I3D进行特征提取，双流I3D模型是视频领域中经典的模型，一路使用RGB信息建模空间信息，一路采用光流信息建模时间变化信息。预训练一般使用Kinetics-400这样的大型数据集，提取出1024*帧数的矩阵，向量和视频的帧具有时间上的对应关系，不过经过实验，其他模型如R(2+1)D、TSN等模型也可以，效果差不多。这里提取特征的时候，一般是采用一个特征向量对应16帧，然后每次向后移动1帧的这种形式，具体参数根据需要进行更改，这种得到的特征向量个数其实是总帧数-16，不过这点差别是不影响结果的。</p><h3 id="用卷积进行映射"><a href="#用卷积进行映射" class="headerlink" title="用卷积进行映射"></a>用卷积进行映射</h3><p>使用这一操作，论文中说有助于更好地结合时间序列数据的本地上下文，对于这一点，我的理解是卷积操作使得可以更好的捕捉到相邻时间前后的信息。</p><p>另一点是稳定视觉Transformer的训练，这一点怎么体现的具体论文也没说，我也不是很清楚。</p><h3 id="多尺度Transformer进行编码"><a href="#多尺度Transformer进行编码" class="headerlink" title="多尺度Transformer进行编码"></a>多尺度Transformer进行编码</h3><p>把$Z_0$进行特征表示，乘以一个W<br>$$<br>Q&#x3D;Z^0W_Q, K&#x3D;Z^0W_K, V&#x3D;Z^0W_V<br>$$<br>自注意力输出，这里就是一般Transformer的这种方式，计算一个余弦相似度，然后进行缩放，进行softmax操作，最后和Value相乘得到结果。<br>$$<br>S&#x3D;softmax(QK^T&#x2F;\sqrt(D_q))V<br>$$<br>使用Transfomer的时候这里是通过使用可选的下采样构建特征池化金字塔，从而更好的关注到时间上不同距离的影响。</p><p>作者在后续的消融实验中证明了使用Transformer结构是取得好的效果最重要的原因。</p><p>在编码的时候作者也考虑使用位置编码，但是发现加上之后效果会更差，因此默认是没有使用的</p><h3 id="使用卷积网络进行解码"><a href="#使用卷积网络进行解码" class="headerlink" title="使用卷积网络进行解码"></a>使用卷积网络进行解码</h3><p>对于使用卷积网络进行解码这一步骤中，这里使用的是带有分类和回归头的轻量级卷积网络。分类头检查特征金字塔上所有 L 层的每个时刻 t，并预测每个时刻 t 的动作概率 p(at)。分类网络是使用 3 层 1D 卷积实现的。回归头也检查金字塔上所有 L 级的每一时刻 t。不同之处在于，仅当当前时间步 t 位于某个动作中时，回归头才预测到动作开始和偏移的距离。除此之外，在后处理环节还使用了非极大值抑制（nms）操作，把多余的预测消除掉。</p><h3 id="损失计算"><a href="#损失计算" class="headerlink" title="损失计算"></a>损失计算</h3><p>在损失计算这部分，使用了分类损失和回归损失，仅当预测的分类不是背景的情况下计算回归损失，相应的还设置了权重。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/loss_actionformer.png" alt="image-20221106194551616"></p><h2 id="模型缺点与改进方向"><a href="#模型缺点与改进方向" class="headerlink" title="模型缺点与改进方向"></a>模型缺点与改进方向</h2><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>最大的问题应该还是在于使用预提取的视频特征，不是端到端的模型，从实际使用来说，特征提取花的时间远大于实际的代码训练与推理，在项目应用中，一个几秒的视频特征提取在1060上需要6秒左右，而模型推理只需要0.02秒，这一问题在应用时感知非常明显。</p></li><li><p>另一问题应该还是使用了大量有标注的信息，而这一信息不易获取而且成本很高。</p></li><li><p>文中还提到了一个问题在于存在预定义动作词汇的约束。</p></li></ul><h3 id="改进方向"><a href="#改进方向" class="headerlink" title="改进方向"></a>改进方向</h3><ul><li><p>我觉得一个问题在于可以通过可学习的前处理操作替代特征提取的操作，特征提取这一步骤使用的预训练好的模型，在使用的时候是不计算梯度，更新参数的。最近我读了一篇视频领域标注的论文SWINBERT，感觉其中的思想可以参考一些，该模型的前面使用了Video Swin Transformer模型，后面使用了稀疏注意力，而且模型对于帧率是自适应的，不需要再指定视频的帧率信息，这一思路或许可以应用在这一领域。</p></li><li><p>另一个问题在于这种方法还是有监督学习，需要使用大量人工标记的视频样本进行学习还有预定义的动作词汇的约束，未来可以从预训练方面还有半监督无监督学习等方向改进，在没有人工标签的情况下从视频和文本语料库中学习。</p></li><li><p>还有一点作者认为目前还缺乏时序动作定位领域的预训练。目前在很多领域都有很大的数据集预训练，随后微调都能取得不错的效果，而在这一领域目前还缺乏。</p></li></ul><h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><ul><li><p>该模型不仅可以预测有开始和结束帧的情况，还可以把开始帧设为0，仅预测结束帧作为关键帧，经过实验发现这样的方法使用起来也没问题，也能取得很好的效果。</p></li><li><p>在项目中，使用该模型效果确实非常好，而且足够轻量级就可以完成一定要求的任务，训练推理都很快。</p></li><li><p>在不调参的情况下，使用其他数据集的参数配置效果就很好。</p></li><li><p>经过实验，在小规模数据集上表现良好。</p></li><li><p>额外增加了特征提取的操作，增加了使用的复杂度，使用起来需要组合，考虑更多的问题。</p></li></ul><p>总而言之，这一模型在时序动作定位领域这一较为小众的方向中取得了不错的成绩，如果是相关方向的值得一看。</p>]]></content>
    
    
    <summary type="html">之前读的论文</summary>
    
    
    
    <category term="时序定位" scheme="http://example.com/categories/%E6%97%B6%E5%BA%8F%E5%AE%9A%E4%BD%8D/"/>
    
    
    <category term="ActionFormer" scheme="http://example.com/tags/ActionFormer/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu的基本使用</title>
    <link href="http://example.com/2022/11/01/ubuntu%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/11/01/ubuntu%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-01T23:17:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<p>实验室的服务器到了，今天给组里的同学们分享了一下Ubuntu的基本使用，匆忙写了一点相关的东西，顺便发上来，虽然也挺基础的，但反正博客也没多少东西，就记录一下好了。</p><h1 id="文件组织结构"><a href="#文件组织结构" class="headerlink" title="文件组织结构"></a>文件组织结构</h1><p><code>/</code>为根目录，为系统最基本的目录</p><p><code>/home</code>下有用户名的文件夹，该文件夹就是<code>~</code>为主目录，为日常使用的目录</p><p>命令在终端中输入，需要注意当前所在的文件夹</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir xx</span><br></pre></td></tr></table></figure><p>进入文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd xxx</span><br></pre></td></tr></table></figure><p>可以使用相对路劲和绝对路径</p><p>使用相对目录回到上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>进入根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>根目录下的文件非常重要，不要轻易动。</p><p>显示当前文件夹下有哪些文件和文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>后面可以接参数</p><p>如果是接-a则是查看隐藏文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>如果后接-l则是查看详细信息，包括权限</p><p>vim的使用</p><p>vim是一个非常经典的文件编辑工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.py</span><br></pre></td></tr></table></figure><p>即可进入编辑</p><p>进入模式之后可以点击键盘的<code>i</code>或者<code>a</code>插入，即可输入，方向键可以控制，详细的命令很多，可以自行查询</p><p>编辑完成之后，需要点击<code>esc</code>退出编辑模式</p><p>随后点击<code>shift + :</code>，就是输入:，然后输入w表示保存，随后输入q表示退出</p><p>即输入<code>:wq</code>完成保存退出，后面有时候需要加上<code>!</code>表示强制</p><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><p>root是最高权限，在此状态下不要轻易动一些东西，危险</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>进入root模式</p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>退出root模式</p><p>发现文件上有锁或者x说明当前是不能使用的，需要授权</p><p>权限包括三个部分，用户user、组group、其他人other</p><p>权限内容也包括方面，读r、写w、执行x，对应的编码是4、2、1</p><p>如向日葵远程传文件，无法执行，常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 xxx</span><br></pre></td></tr></table></figure><p>xxx为文件名，包括扩展名</p><p>给文件夹和文件夹下的所有都授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 xxx</span><br></pre></td></tr></table></figure><p>常用*</p><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 *</span><br></pre></td></tr></table></figure><p>*一般是指全部，这里就是指当前文件夹下的所有文件（不包含下一级目录）</p><p>很多命令执行没有权限的时候都需要前面加<code>sudo</code></p><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm xx</span><br></pre></td></tr></table></figure><p>有时候后面会跟-rf，表示不询问，把子目录也都删除，<strong>慎用，非常危险</strong></p><h1 id="日常使用文件"><a href="#日常使用文件" class="headerlink" title="日常使用文件"></a>日常使用文件</h1><p>下载的<code>.deb</code>文件可以直接点击安装，或者使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxx</span><br></pre></td></tr></table></figure><p>也可以安装</p><p><code>.sh</code>文件可以直接输入<code>./xxx.sh</code>执行，或者<code>sh xxx.sh</code>，没有权限的时候先授权</p><p>常用命令，查看有哪些包可以升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>随后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>将这些包升级，这是经常需要做的</p><p>apt为一种包管理的工具，有很多时候可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xx</span><br></pre></td></tr></table></figure><p>直接下载安装</p><p>snap是ubuntu近些年大力推广的一种包管理的工具</p><h1 id="anaconda的基本使用"><a href="#anaconda的基本使用" class="headerlink" title="anaconda的基本使用"></a>anaconda的基本使用</h1><p>创建虚拟环境可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n &lt;name&gt; python=3.x</span><br></pre></td></tr></table></figure><p>这种方式，随后可以根据<code>requirements.txt</code>的信息执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>安装所需的包</p><p>也可以通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yaml</span><br></pre></td></tr></table></figure><p>从yaml文件中创建环境并安装包。</p><p>在linux下使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate &lt;name&gt;</span><br></pre></td></tr></table></figure><p>在windows下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;name&gt;</span><br></pre></td></tr></table></figure><p>激活指定的虚拟环境</p><p>使用以下命令可以删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n &lt;name&gt; --all</span><br></pre></td></tr></table></figure><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>这是一种非常方便的远程控制的方法，广泛使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ps@10.120.16.12</span><br></pre></td></tr></table></figure><p>输入密码即可远程命令行控制，ps为用户名，后面的为当前局域网下的ip地址，目前在有线校园网的情况下可以直接这样连接</p><p>pycharm（专业版）、vscode等软件都可以直接使用远程ssh的解释器，本地写代码，然后远程直接跑。</p>]]></content>
    
    
    <summary type="html">一点小记录</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</title>
    <link href="http://example.com/2022/09/20/HRNet/"/>
    <id>http://example.com/2022/09/20/HRNet/</id>
    <published>2022-09-20T19:57:37.000Z</published>
    <updated>2024-04-09T14:32:27.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition"><a href="#【论文阅读】-Deep-High-Resolution-Representation-Learning-for-Visual-Recognition" class="headerlink" title="【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition"></a>【论文阅读】 Deep High-Resolution Representation Learning for Visual Recognition</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在计算机视觉中高分辨的表示是非常重要的，HRNet是用于识别的高分辨网络，广泛的用于姿态检测以及语义分割中，也可用于目标检测。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>相比一般的网络，HRNet具有特殊的结构，一般的卷积神经网络往往是随着网络的深入，特征图的分辨率逐渐由高到低，这样的网络结构设计适合一般的视觉问题，视觉空间信息都是冗余的，对信息的精准度要求不高，但是这种结构在面对关键点检测以及语义分割问题的时候就不能很好的完成任务，精准度不够。因此就有了HRNet的结构设计如下图所示：<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet1.png" alt="HRnet1"><br>HRNet网络在模型的整个过程中都能保持高分辨率，采用并行的网络，不同的流的分辨率不同，在网络的第n个阶段有n流个网络，从前往后每次下采样一个流，同时在阶段的连接出对信息进行交汇，从高分辨率使用卷积到低分辨率，从低分辨率的流上采样到高分辨率的流，最终得到模型。<br>模型的特色有两点：</p><ul><li>使用并行连接从高到低分辨率的卷积流</li><li>跨分辨率反复交换信息</li></ul><p>使用并行连接使得在整个过程中都保持了高分辨率的表示，使用了跨分辨率的反复融合信息使得模型对于位置具有很强的敏感性，可以较好的完成相关的工作。</p><h2 id="模型的变体"><a href="#模型的变体" class="headerlink" title="模型的变体"></a>模型的变体</h2><p>在HRNet模型中共提出了三种模型的结构，HRNetV1 HRNetV2以及HRNetV2p这三种结构<br><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/img/HRnet2.png" alt="HRnet2"><br>其中V1只使用了融合最后的高分辨率流，这种结构相比V2运算量更小，而在关键点检测任务中和V2版本性能基本没有差别。而V2版本对最后的信息都进行了融合，在语义分割任务中表现较好。V2p则是在V2的基础上形成特征金字塔，更适合目标检测任务。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>消融实验证明分辨率确实会影响关键的检测的质量，这一点与一般的感觉相符。对多分辨率融合的实验也证明了融合会带来好的性能提升。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>对该模型的研究中可以得到一个结论，针对特定的问题来设计网络架构可能是有用的。此外，一个可能的误解在于分辨率越高，HRNet的内存消耗越大，但是实际是在姿态估计、语义分割以及目标检测中，内存成本并未很高。</p>]]></content>
    
    
    <summary type="html">读论文的记录</summary>
    
    
    
    <category term="姿态估计" scheme="http://example.com/categories/%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>今日随笔</title>
    <link href="http://example.com/2022/05/10/%E4%BB%8A%E6%97%A5%E9%9A%8F%E7%AC%94/"/>
    <id>http://example.com/2022/05/10/%E4%BB%8A%E6%97%A5%E9%9A%8F%E7%AC%94/</id>
    <published>2022-05-10T00:00:00.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我终于把图床修好了"><a href="#我终于把图床修好了" class="headerlink" title="我终于把图床修好了"></a>我终于把图床修好了</h1><p>之前gitee的图床用不了，因此这段时间博客都一片404（其实本来也影响不大，毕竟也没几篇博客），今天总算抽出时间修一下，虽然不是什么特别麻烦的事，就是懒。之前的图还真是手动一个一个传的，效率太低，现在用了typora+picgo+github，总算是能用了，方便了不少，希望以后会多更新下吧。之前说的要把大作业都传上去，也能方便后面的学弟学妹，但是后面要么懒，要么就做毕设，最近毕设做的差不多了，又要开始准备做研究生的项目了（虽然确实不多）。</p><p>不过前段时间做的一个有意义的事是联系了两个小伙伴，把自己的考研经历分享到了<a href="https://github.com/CoderJackZhu/XD-AI-graduate_entrance_exam">GitHub</a>，三人成绩还行（平均380+），也上岸了，下一篇就分享一下经历。</p><p>最近在做毕设论文的修改，同时也学习一下深度学习相关领域的知识，毕竟准研究生了，要学的很多东西可以先准备着了。</p>]]></content>
    
    
    <summary type="html">进步了</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置</title>
    <link href="http://example.com/2022/04/10/Ubuntu%2020.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/10/Ubuntu%2020.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-10T00:08:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-20-04下Pytorch深度学习环境搭建以及常用工具配置"><a href="#Ubuntu-20-04下Pytorch深度学习环境搭建以及常用工具配置" class="headerlink" title="Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置"></a>Ubuntu 20.04下Pytorch深度学习环境搭建以及常用工具配置</h1><p>作者：CoderJackZhu</p><p>从事计算机相关行业的在今后学习工作过程中总会接触到Linux系统，而且在很多情况下，Windows下可能会出现一些奇奇怪怪的bug，这些问题部分是系统的问题导致的，比如常见的路径中不能带中文。深度学习环境有时候为了更好的管理机器，取得更好的效率也常常采用Linux系统，这里选择Ubuntu是对于个人的萌新而言，应该选择尽量大众些的系统，出问题也容易找到解决办法，比如由于各种误操作，linux系统我至少已经重装过不下二十次了，为了更好的学习相关知识，这样一个系统的搭建也是需要的，这里写出这个博客为了方便使用，也让我之后重装系统的时候不用再找好几个博客了。</p><h2 id="“双系统”中Ubuntu安装"><a href="#“双系统”中Ubuntu安装" class="headerlink" title="“双系统”中Ubuntu安装"></a>“双系统”中Ubuntu安装</h2><p>这里的所说的双系统并不是真正的单个硬盘上多个挂载点的双系统，而是把第二个系统装在移动硬盘里面，这样正常开机默认还是Windows系统，需要选择系统就在进入系统时长按<code>F11</code>（不同品牌电脑不同），选择相应的系统就可以进入了，这样的安装相比一个硬盘上多个挂载点简易不少，配置难度低，而且不易出问题，不然一不小心两个系统都不能用了，这样Linux出了问题只需要直接覆盖重装就可以了，下面是具体步骤：</p><h3 id="准备需要的工具"><a href="#准备需要的工具" class="headerlink" title="准备需要的工具"></a>准备需要的工具</h3><p>这里软件方面需要准备的是，从官方网站上下载Ubuntu的镜像，以及刻录软件。刻录软件使用UltraIso或者balentEtcher都是可以的，balentEtcher相对操作更简易些。</p><p>硬件需要准备的是一个U盘用于制作启动盘，尽量大于等于16G，一个移动硬盘用于安装系统，尽量大于128G，毕竟实际使用过程中数据集也比较大，还是需要给后续留足空间。</p><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>安装好Format后选择文件为之前下的系统镜像，选择硬件为U盘，然后点击Flash就可以了，等几分钟安装校验完就可以了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>然后重启并选择使用刚才的U盘启动，就可以进入安装Ubuntu的界面了，正常使用的话选择中文汉语，正常安装，勾选安装第三方软件。这个时候可以插上移动硬盘了，然后输入自己的用户名密码什么的，之后就进入选择安装位置了，这里点击清理磁盘安装就可以了，不然挂载点就很不太好理解，然后下一步点击你插入的那个硬盘，<strong>这里注意别选错</strong>，根据你的硬盘大小就能判断出了，选错其他盘的话可能你的数据就凉了，然后下一步。然后选择地图上的位置为shanghai就可以了，之后就进入安装了，等一会安装完然后点击重新启动，然后根据提示拔掉U盘，然后开机的时候选择那个硬盘启动，这个时候硬盘的名字就已经是Ubuntu了，然后两次回车就可以进入系统了，到这里，系统的安装就算完成了。</p><h2 id="深度学习Pytorch环境配置"><a href="#深度学习Pytorch环境配置" class="headerlink" title="深度学习Pytorch环境配置"></a>深度学习Pytorch环境配置</h2><p>正常使用深度学习环境跑代码，GPU是必不可少，这里只演示GPU版本的pytorch的安装，所需要的工具为Anaconda、CUDA、cuDNN、Pytorch。Anaconda可以用来管理不同版本的环境，CUDA和cuDNN是使用GPU计算所需要的工具这里需要注意相互之间的匹配关系，首先去<a href="https://pytorch.org/">pytorch官网</a>可以看到</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136735.png" alt="6"></p><p>因此这里选择CUDA11.3，然后根据CUDA的版本，选择cuDNN的版本，具体在下载cuDNN的时候可以看到。</p><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>安装NVIDIA驱动有多种方式，比如可以去官网下载最新版，这里介绍最简单的一种，首先打开软件与更新，然后点附加驱动这里，系统默认用的是开源的的驱动，这里选最上面的几个版本高的就可以，这里安装的cuda11.3驱动至少要470以上，然后点击应用更改等一会就可以了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136053.png" alt="1"></p><p>安装完成之后在命令行输入<code>nvidia-smi</code>就可以看到下图GPU情况，这就说明驱动基本没问题了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136894.png" alt="4"></p><h3 id="下载安装cuda"><a href="#下载安装cuda" class="headerlink" title="下载安装cuda"></a>下载安装cuda</h3><p>这里找<a href="https://developer.nvidia.com/cuda-downloads">官方网站</a></p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102136125.png" alt="2"></p><p>可以看到这里默认是11.6版本的，这里点击下方中的<code>Archive of Previous CUDA Releases</code>并选择对于的11.3版本，都是11.3的情况下选最后一位高的，之后进入以下界面，选择对应版本，然后先后输入下方的两行，第一行输入命令行，就开始下载了，下载完之后在对应的目录打开终端命令行，然后输入第二行，就开始安装了。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137818.png" alt="3"></p><p>安装过程中看到勾选多个项目的时候，把第一项的X勾选框点下回车取消掉，由于之前已经安装了驱动，所有这里不需要安装里面附带的驱动，然后切换Install并点击回车，等待就可以安装好了。</p><p>然后添加路径，修改<code>.bashrc</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>#在末尾添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda/bin$&#123;PATH:+:$&#123;PATH&#125;&#125; </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125; </span><br></pre></td></tr></table></figure><p>更新刚才输入的内容，在命令行输入： <code>source ~/.bashrc</code></p><p>安装成功输入<code>nvcc -V</code></p><h3 id="cuDNN的安装"><a href="#cuDNN的安装" class="headerlink" title="cuDNN的安装"></a>cuDNN的安装</h3><p>到<a href="https://developer.nvidia.com/cudnn">官网</a>下载文件：点击如图<code>Download cuDNN</code>按钮。下载需要NVIDIA的账号，没有的需要先注册一个。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137133.png" alt="5"></p><p>然后进入<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse742-10">下载界面</a>并选择Previous Archive</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137217.png" alt="7"></p><p>选择CUDA11.x对于的cuDNNv8.2 选择Runtime Library版的deb文件进行下载：</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137992.png" alt="8"></p><p>安装cuDNN过程与CUDA类似：<br>在下载的文件的文件夹里面打开终端，执行命令<code>sudo dpkg -i &lt;name&gt;</code>，其中<code>&lt;name&gt;</code>为刚才下载的deb文件名<br>执行命令<code>sudo apt install &lt;name&gt;</code>,其中<code>&lt;name&gt;</code>要和自己下载的cudnn版本匹配，比如这里是libcudnn8</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>Anaconda用于控制版本管理，直接在系统的python里装不太方便，库的控制也不那么直观，使用Anaconda之后会方便很多。</p><p>这里直接从<a href="https://www.anaconda.com/products/individual">官网</a>下载就可以，速度也不错，下载完之后在下载的文件夹打开终端，这里重点，命令行不要输入<code>sudo</code>，直接<code>sh &lt;name&gt;</code> <code>name</code>为刚才下的文件名然后可以了，一路回车过完协议书，然后yes同意，然后要么回车要么yes就可以了。千万别在命令行前面加<code>sudo</code>，这样anaconda3的文件夹就安装在<code>root</code>下了，这样感觉有时候不方便；直接<code>sh</code>就可以安装在你的主目录下，装好退出命令行就可以用了。</p><p>安装过程先一路回车，然后按要求都yes就好。</p><p>安装后退出命令行，然后重新进入命令行，然后输入<code>conda</code>，若出现如下则证明安装成功，若出现command not found则重启系统，若还不行则需要添加环境变量。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102137141.png" alt="10"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>再执行conda，若好则安装结束，否则手动添加环境变量</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>若vim未安装，先安装，可以使用<code>sudo apt install vim</code>安装（或者使用<code>sudo gedit ~/.bashrc</code>也可打开文件），然后执行上述命令，然后在文件的最后添加，这里的内容不要直接复制，根据自己的用户名来定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export</span><br><span class="line">PATH=/home/&lt;自己的用户名&gt;/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>输入完成后点击<code>ESC</code>, 然后输入<code>:wq</code>保存退出.</p><p>然后更新环境变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入conda,检查是否配置成功。</p><h2 id="创建环境并安装PyTorch"><a href="#创建环境并安装PyTorch" class="headerlink" title="创建环境并安装PyTorch"></a>创建环境并安装PyTorch</h2><p>安装后一般应用栏里是没有这个软件的，需要在命令行中输入<code>anaconda-navigator</code>等待进入就可以了，然后点左方的environment然后点下方的加号创建环境，想个环境的名字，选择需要的python版本，这里也可以使用命令来创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n &lt;环境名&gt; python=3.8</span><br></pre></td></tr></table></figure><p>等待创建完成后在命令行中输入<code>conda info -e</code>即可查看现有哪些环境</p><p>然后进入相应的环境输入下面命令，其中这里使用的环境名为<code>env1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate env1</span><br></pre></td></tr></table></figure><p>即可激活，若为windows下则为<code>conda activate env1</code>。</p><p>这样就进入环境了，随后输入pytorch官网上的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</span><br></pre></td></tr></table></figure><p>如果速度慢，则需要换源，一般默认使用清华源为以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><strong>或者</strong>打开主目录下的隐藏文件<code>.condarc</code>，将其内容整体更换为以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssl_verify: true</span><br><span class="line">show_channel_urls: true</span><br><span class="line"></span><br><span class="line">channels:</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行 <code>conda clean -i</code> 清除索引缓存。</p><p>这时候安装命令就要把最后的<code>-c pytorch</code>去掉，变成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3</span><br></pre></td></tr></table></figure><p>就可以很快的下载了，也可以使用<a href="https://download.pytorch.org/whl/torch_stable.html">pytorch离线安装下载</a>直接下载whl文件，然后在命令行中进入下载的文件夹，然后输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch-<span class="number">1.9</span><span class="number">.0</span>+cu111-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure><p>这样就可以安装了，若为linux则将<code>win_amd64</code>改为<code>linux_x86_64</code>即可。</p><p>若为单次换下载换源则命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/  </span><br></pre></td></tr></table></figure><p>在后面加上需要安装的库名字即可。</p><h2 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h2><p>若全部安装完成，则新建一个python脚本hello.py，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">print(torch)</span><br><span class="line">print(torchvision)</span><br><span class="line">print(torch.cuda.is_available())</span><br><span class="line">x=torch.randn(5, 3)</span><br><span class="line">print(x)</span><br><span class="line">print(torch.cuda.device)</span><br><span class="line">print(torch.__version__)</span><br><span class="line">print(torchvision.__version__)</span><br><span class="line">print(torch.version)</span><br><span class="line">print(torch.version.cuda) # Corresponding CUDA version</span><br><span class="line">print(torch.backends.cudnn.version()) # Corresponding cuDNN version</span><br><span class="line">print(torch.cuda.get_device_name(0)) # GPU type</span><br></pre></td></tr></table></figure><p>即可查看详细情况，若cuda可用这里显示true就说明安装成功。</p><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><p>深度学习环境其他非常常用的软件一般还有VScode和Pychram，一般这两个都安装比较好。</p><p>BT下载以及磁力链下载很多时候是需要的，因此需要下载工具</p><p>下载工具可以用Free Download Manger，还是非常好用的，还有qbittorrent和Motrix作为备用下载软件，这两个软件下载后不用安装，需要用的时候打开，也非常不错。</p><p>其他比如截屏剪切板等功能用utools也挺好，不过高级功能后来收费了。</p><h2 id="windows下安装的差异"><a href="#windows下安装的差异" class="headerlink" title="windows下安装的差异"></a>windows下安装的差异</h2><h3 id="更新驱动"><a href="#更新驱动" class="headerlink" title="更新驱动"></a>更新驱动</h3><p>正常使用的话，下载GeForce Experience然后把驱动更新到最新版即可，或者手动下载驱动，没有特殊需要的话默认最新版就好。</p><h3 id="安装cuda和cudnn"><a href="#安装cuda和cudnn" class="headerlink" title="安装cuda和cudnn"></a>安装cuda和cudnn</h3><p>主体部分和linux下大同小异，按要求下载安装对应版本即可，安装cuda后打开命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>返回版本号说明安装cuda成功。</p><p>不过cudnn这里下载完后是复制到cuda对应的bin目录里面，一般是C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA。</p><p>安装后有时候不能使用则需要添加环境变量，在系统环境变量里的Path项下添加几个路径</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</p><p> 　　C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64</p><p>安装完成后进入路径然后运行测试，成功则为以下界面。</p><p><img src="https://gcore.jsdelivr.net/gh/CoderJackZhu/bloggallery/PicGo/202205102138180.png" alt="11"></p><p>然后运行测试的代码即可。</p>]]></content>
    
    
    <summary type="html">一点小记录</summary>
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>考研后的思考</title>
    <link href="http://example.com/2021/12/29/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>http://example.com/2021/12/29/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/</id>
    <published>2021-12-29T00:08:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考研后的感想"><a href="#考研后的感想" class="headerlink" title="考研后的感想"></a>考研后的感想</h1><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>今天是考研后的第二天晚上，考研生活算是过去了，然后就是之后的新生活了，对于之后的安排，目前来看，主线是做毕业设计，在期间可以学习一些东西。我计划近期将之前做过的大作业再复习一遍，然后整理出来，发到博客里，这不是什么大的任务，我打算先从这样的小事做起，慢慢学知识。毕竟，在有目标的情况下很多时候还不一定能一直坚持做事，现在时间比较闲了，能做多少事就比较随缘了。</p>]]></content>
    
    
    <summary type="html">反内卷而不躺平</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>机器学习上机报告——聚类分析</title>
    <link href="http://example.com/2021/05/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8A%E6%9C%BA%E6%8A%A5%E5%91%8A%E2%80%94%E2%80%94%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/05/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8A%E6%9C%BA%E6%8A%A5%E5%91%8A%E2%80%94%E2%80%94%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</id>
    <published>2021-05-23T12:29:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘-要"><a href="#摘-要" class="headerlink" title="摘 要"></a>摘 要</h1><p>本文使用了 K-means 和 DBSCAN 两种聚类方法, 较好的完成了聚类任务, 并将得到的结果使用了 t-SNE 和 PCA 两种方法进行降维可视化,从而更好的得到聚类的效果,并计算了轮廓系数、 (\mathrm{CH}) score、 DBI 这些聚类指标, 对于 K-means 方法还使用了图片进行聚类, 使得效果更加直观, 实验效果非常好。<br>在这次实验中, 使用的两种聚类方法, K-means 是基于原型的方法, 而 DBSCAN 是基于密度的聚类方法。本文首先介绍了两种聚类方法的背景知识以及相关指标的知识, 随后简单介绍了 Iris 数据集, 然后展示出实验环境。<br>在代码实现部分, 本文分别对两种聚类方法列出了重点的代码, 并<br>进行简要的介绍, 说明这些部分是如何通过代码实现的。<br>在实验结果部分, 本文展示了两种聚类方法的结果, 对于 K-means 方法, 使用 Iris 数据集进行了降维可视化, 并算出 Iris 的轮廓系数为 0.4976 , 对图片进行聚类, 得到着色后的效果图, 并进行降维可视化。对于 DBSCAN 方法, 这里使用了八组数据进行展示, 分别对八组数据求出其轮廓系数、 (\mathrm{CH}) score、 (\mathrm{DBI}) 这些聚类指标,并得到了较好的实验效果, 数据较多, 具体数据以及聚类效果图见正文部分。<br>最后对本次实验进行了总结, 分析实验得出了收获以及思考。关键字: K-means DBSCAN 轮廓系数 PCA t-SNE</p><h2 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h2><p>TOC –&gt;</p><!-- 1 背景知识 11.1 基于原型的方法 11.2 基于密度的方法论 11.2.1 基本知识 11.2 .2 基本概念 11.3 轮廓系数 22 Iris 数据集简介 23 实验环境 24 代码实现 2\(4.1\mathrm{kmeans}\) 代码实现 24.2 DBSCAN 代码实现 45 结果与分析 7\(5.1\mathrm{kmeans}\) 聚类 75.2 DBSCAN 聚类 96 总结 11A K-means 程序代码 12B DBSCAN 程序代码 15## 1 背景知识## 1.1 基于原型的方法本作业使用的基于原型的方法即 Kmeans 聚类算法, 其原理如下:K-均值 (K -means) 聚类算法是应用最广泛的基于划分的聚类算法之一, 适用于处理大样本数据。其基础是最小误差平方和准则,若 \(N_{i}\) 是第 \(i\) 聚类 \(\Gamma\) 中的样本数目, \(m_{i}\) 是这些样本的均值, 即\[m_{i} = \frac{1}{N_{i}}{\sum}_{y {\in} \Gamma}y\]把其中的各样本 \(y\) 与均值 \(m_{i}\) 间的误差平方和对所有类相加后即得目标函数为:\[J_{e} = {\sum}_{i = 1}^c{\sum}_{y {\in} {\Gamma}_{i}}{\left. \parallel y {-} m_{i} \right.\parallel}^{2}\]即需进行优化使上式的值取得最小。该算法的的步骤如下:Step1: 选取 \(\mathrm{K}\) 个初始聚类中心:Step2: 根据最小距离标准将要分类的模式样本划分到某个簇中心;Step3: 计算各个聚类中心的新的向量值及计算各聚类簇中样本数据的均值向量; Step4: 若聚类中心与上一次的相同, 则返回 Step2, 否则计算结束:## 1.2 基于密度的方法论## 1.2.1 基本知识基于密度的聚类中著名的是 DBSCAN, DBSCAN (Density-Based Spatial Clustering of Applications with Noise, 具有噪声的基于密度的聚类方法) 是一种基于密度的空间聚类算法。该算法将具有足够密度的区域划分为簇, 并在具有噪声的空间数据库中发现任意形状的簇, 它将簇定义为密度相连的点的最大集合。该方法主要有以下特点:- 发现任意类型的聚类- 处理噪音- 一编扫描- 需要密度参数作为终止条件在使用密度聚类算法的时候, 有两个超参数, 领域的最大半径 Eps 和领域中最少的点数 MinPts。## 1.2.2 基本概念此处需要定义几个概念:核心对象: 一个对象的 \(\epsilon\) -邻域至少包含最小数目 MinPts 个对象,不是核心点的 Eps 邻域内的对象称为边界点, 不属于任何簇的对象为噪声. 对于空间中的一个对象, 如果它在给定半径 \(\epsilon\) 的邻域中的对象个数大于密度阈值 MinPts,则该对象被称为核心对象,否则称为边界对象。密度可达: 存在一个从 \(\mathrm{p}\) 到 \(\mathrm{q}\) 的 \(\mathrm{DDR}\) 对象链 (如果存在一条链 \( < p1,p2,{\ldots},pi > \) ,满足 \(p1 = p,pi = q,p_{i}\) 直接密度可达 \(p_{i + 1}\) ,则称 \(p\) 密度可达 \(q\) )。由一个核心对象和其密度可达的所有对象构成一个聚类。## 1.3 轮廓系数轮廓系数是聚类好坏的一种评价方式, 它结合内聚度和分离度两种因素。可以用来在相同原始数据的基础上用来评价不同算法、或者算法不同运行方式对聚类结果所产生的影响。其计算方法如下:对于其中的一个点 \(i\) 而言,首先计算 \(a(i) = average\left( i\text{向量到所有它属于的簇中其它点的距离} \right)\) 然后计算 \(b(i) = \min\left( i\text{向量到与它相邻最近的一簇内的所有点的平均距离} \right)\) ,那么 \(i\) 向量轮廓系数为:\[S(i) = \frac{b(i) {-} a(i)}{\max\{a(i),b(i)\}}\]轮廓系数的值是介于 \(\lbrack{-}1,1\rbrack\) ,越趋近于 1 则代表内聚度和分离度都相对较优。## 2 Iris 数据集简介Iris 数据集是著名的数据集之一。Iris 数据集包含 3 个类, 每个类有 50 个实例, 其中每一类都是指一种鸢尾属植物。有一类是与另外两类是线性可分的, 而另外两类之间是线性不可分的。## 3 实验环境- 系统: Windows 10- 程序运行环境: Python 3.8- Python 库: numpy、pandas、matplotlib、sklearn、random- 开发工具: Spyder、VSCode## 4 代码实现在代码实现中,对于 kmeans 我使用了两种数据集进行实现, 第一种使用了经典的数据集 Iris 鸢尾花, 为了更好的体现聚类的效果, 我使用了一张照片进行聚类, 对不同的聚类使用不同的颜色表示。在评估聚类的效果时,对于 kmeans 聚类, 这里使用了不同聚类的平均轮廓系数来进行分析。对于这两种数据, 都使用了 t-SNE 和 PCA 两种降维方式来展示效果。对于 DBSCAN 聚类, 这里使用了一些聚类的数据并可视化, 可以很好的表达密度聚类的效果。## 4.1 kmeans 代码实现对于 kmeans 的 Iris 实现, 这里建立了一个类来进行处理, 在获取到数据后, 首先根据设置的 \(\mathrm{k}\) 值,选出 \(\mathrm{k}\) 个初始聚类中心,本代码使用的方法是从数据集中随机抽取 \(\mathrm{k}\) 个数据来初始化,并将数据的序号记录下来,其 \(\mathrm{k}\) 个点的四维的数据直接存放到建立好的 \(k {\times} 4\)的数组中, 随后按照算法一步一步迭代, 直到达到终止条件, 这里终止条件设置的为迭代的次数, 最后可以得到聚类的中心点以及每个数据的标签, 随后运用两种降维方式可视化出来, 然后利用 sklearn 库来计算平均轮廓系数。对于用 kmeans 处理照片, 主函数部分与 Iris 的实现相同, 但是多了一些部分, 首先读取照片, 并将三维转为二维, 从而方便进行处理, 随后进行聚类, 得出结果后, 把数据恢复成三维, 并将图片按照聚类着色为多种颜色, 并利用 t-SNE 和 PCA 进行降维可视化, 得到结果。聚类部分建立的类代码如下: 初始化参数, 函数 fit 进行聚类, imshow 降维展示, plot_img 图片着色。---class Kmeans () :def __init__(self,dat,k):data=scale(dat)self.data=dataself.row,self.col \( = \) data.shapeself.k=kself.centers=np.ndarray((k,self.col))choices=random.choices (range (self.row), k=k)for i in range(k):self.centers[i,:]=self.data[choices[i],:]def fit(self,counts=15):count \( = 0\)while (count<counts):self.labels=np.zeros((self.row))for i in range(self.data.shape[0]):dis=[]for \(j\) in range(self.k):dis.append(np.linalg.norm(self.\\&data \(\lbrack i, : \rbrack\) -self.centers \(\lbrack j, : \rbrack\) ,axis=0))lab=np.argmin(dis,axis=0)self.labels [i]=labself.result=\\{\\}for i in range(self.k):type=np.where(self.labels==i) [0]self.result[i]=typeif \(\operatorname{len}\left( \text{type} \right) = = 0\) :self.centers \(\lbrack i, : \rbrack = 0\)else:self.centers [i,:]=np.mean(self.data[type,:],axis=0)count \( + = 1\)return self.centers, self.resultdef imshow(self):tsne \( = TSNE\) (n_components \( = 2\) ,learning_rate=100).fit_transform(self.data)pca \( = \) PCA().fit_transform(self.data)plt.figure(figsize=(12, 6))plt.subplot(121)plt.scatter(tsne[:, 0], tsne[:, 1], c=self.labels)plt.subplot(122)plt.scatter(pca[:, 0], pca[:, 1], c=self.labels)plt.colorbar()plt.show()def plot_img(self,row,col):img=self.labels.reshape(row, col)\(\mathrm{im} = \) Image.new("RGB",(row,col)) \# 创建图片for i in range(row):for \(j\) in range(col):if \(\operatorname{img}\lbrack i,j\rbrack = = 0\) :im.putpixel((i, j), (255, 0, 0))if \(\operatorname{img}\lbrack i,j\rbrack = = 1\) :im.putpixel((i, j), (0, 255, 0))if \(\operatorname{img}\lbrack i,j\rbrack = = 2\) :im.putpixel((i,j), \((0,0,255)\) )im.show()im.save('result.jpg')---主函数代码如下:path=' ./2.bmp'file=Image.open(path,’ \(r\) ’) file=np.array(file) row,col,_=file.shape data=file.reshape \(({-}1,3)\) kmeans=Kmeans(data,3)centers, results=kmeans. fit (10) kmeans.imshow()kmeans.plot_img(row, col) print (centers) print (results)此部分进行图片的读取与降维预处理, 然后进行聚类, 然后可视化。Iris 的代码与之相差不大, 不再单独列出, 见附录。## 4.2 DBSCAN 代码实现在代码实现的过程中, 主要有以下步骤: 1. 读取数据2. 构建密度聚类函数3. 将聚类后的结果可视化 4. 对聚类效果进行评价读取数据采用了 scipy 中的 scio 来读取.mat 文件, 然后初步处理并传给聚类函数, 然后对结果可视化,最后利用 sklearn 中的库函数 metrics 来计算轮廓系数、 \(\mathrm{CH}\) score 以及 DBI 这三个指标。首先定义了两个函数用于计算相关信息:def calDist \(\left( \mathrm{X}1,\mathrm{X}2 \right)\) :sum \( = 0\)for \(x1,x2\) in \(zip(x1,X2)\) :sum += \((x1 {-} x2) * * 2\)return sum ** 0.5def getNeibor(data, dataSet, e):res \( = \lbrack\rbrack\)for i in range(dataSet.shape[0]):if calDist(data, dataSet[i]) < e: res.append(i)return res随后定义密度聚类的主函数:def DBSCAN(dataSet, e, minPts):coreObjs \( = \{\}\#\) 初始化核心对象集合 \(\mathrm{C} = \{\}\)\(\mathrm{n} = \) dataSet.shape \(\lbrack 0\rbrack\)\# 找出所有核心对象, key 是核心对象的index, value是 -邻域中对象的index for i in range(n):neibor \( = \) getNeibor(dataSet[i],dataSet,e) if len(neibor) >= minPts:coreObjs [i] = neibor oldCoreObjs \( = \) coreObjs.copy() \(\mathrm{k} = 0\#\) 初始化聚类簇数notAccess = list(range(n)) \# 初始化未访问样本集合（索引） while len(coreObjs) > 0: OldNotAccess \( = \lbrack\rbrack\)OldNotAccess. extend(notAccess) cores \( = \) coreObjs.keys() \# 随机选取一个核心对象randNum = random.randint \(\left( 0,\operatorname{len}\left( \operatorname{cores} \right) {-} 1 \right)\) cores \( = \) list(cores) core \( = \) cores \(\left\lbrack \text{randNum} \right\rbrack\)---queue \( = \lbrack\rbrack\)queue.append(core)notAccess. remove (core)while len(queue) > 0:\(\mathrm{q} = \) queue \(\lbrack 0\rbrack\)del queue [0]if \(q\) in oldCoreObjs.keys():delte \( = \) [val for val in oldCoreObjs[q] if val in notAccess]\(\#\Delta = \mathrm{N}\left( \mathrm{q} \right)\Gamma\)queue.extend(delte) \# 将 \(\Delta\) 中的样本加入队列QnotAccess \( = \) [val for val in notAccess if val not in delte] \#\(\Gamma = \Gamma {\smallsetminus} \Delta\)\(\mathrm{k} + = 1\)\(\mathrm{C}\left\lbrack \mathrm{k} \right\rbrack = \) [val for val in OldNotAccess if val not in notAccess]for \(x\) in \(C\lbrack k\rbrack\) :if \(x\) in coreObjs.keys():del coreObjs [x]return \(\mathrm{C}\)随后定义了一个可视化函数, 主函数算出的聚类结果存在字典里, 这个函数将其标签转化为数组形式, 代码如下:def draw(C, D) :colors = list (mcolors. TABLEAU_COLORS.keys())predict \( = \) np.zeros ((D.shape [0],D.shape [1] + 1))\(j = 0\)keys \( = \) C. keys ()print(keys)for \(\mathrm{k}\) in keys:for \(i\) in \(C\lbrack k\rbrack\) :predict \(\lbrack j,0 : 2\rbrack = D\lbrack i\rbrack\)predict \(\lbrack j,2\rbrack = k\)\(j = j + 1\)plt.scatter(D[i, 0], D[i, 1], color=colors[k + 1])plt.show()return predict---随后定义主函数, 读取数据并进行聚类, 随后计算三个指标, 代码如下:def main():path \( = \) ,/data-密度聚类/square1.mat’ data \( = \) scio.loadmat(path) ['square1'] \# plt.scatter(data[:,0],data[:,1]) \# plt.show()\(D = \operatorname{data}\lbrack : ,0 : 2\rbrack\)label \( = \) data \(\lbrack 2\rbrack\)\(\mathrm{C} = \operatorname{DBSCAN}\left( \mathrm{D},0.9,15 \right)\) predict \( = \operatorname{draw}(C,D)\)s1 = metrics.silhouette_score(predict[:, 0:2], predict[:, 2],metric='euclidean')s2 = calinski_harabasz_score(predict[:,0:2], predict[:,2]) \#计算CHscores3 = davies_bouldin_score(predict[:,0:2], predict[:, 2]) \# 计算 DBI print(s1, s2, s3)## 5 结果与分析## 5.1 kmeans 聚类利用 K-means 聚类对 Iris 数据的处理结果如图 1 所示,其中 \(\mathrm{K}\) 设置为 3,迭代次数设置为 15 。<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_9.jpg?x=134&y=473&w=577&h=303 "/>图 1: kmeans 对 Iris 的聚类效果由图片可以看出, 两种降维方式效果都非常好, 三类数据基本可以较好的分出来, 其中两类较为相似, 这两类与另一类相差较大, 聚类效果较好。此外, 对于 Iris 数据集, 这里还计算了轮廓系数, 在 3 分类迭代次数为 15 的情况下,不同类别的平均轮廓系数为 0.4976 。下面利用 kmeans 聚类对图像进行处理, 图 2 是一张照片:对上面的这张照片聚类处理并着色后,结果如图 3 所示,其中 \(\mathrm{K}\) 设置为 3,迭代次数设置为 15 。由上图处理后的图像可以看出, 图片的聚类效果较好, 图片的轮廓信息可以较好的保留下来, 聚类任务完成。其中聚类处理后分别使用 t-SNE 和 PCA 降维可视化的效果如图 4 所示。<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_10.jpg?x=131&y=96&w=581&h=394 "/>图 2: 聚类前的原图<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_10.jpg?x=132&y=606&w=580&h=391 "/>图 3: kmeans 对图像的聚类效果<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_11.jpg?x=131&y=64&w=579&h=300 "/>图 4: kmeans 对图片的聚类效果降维展示由上图可以看出, 两种降维方式中 PCA 的效果更好, 对图片的聚类任务完成的很好,这也印证了图片的着色图效果较好。## 5.2 DBSCAN 聚类以下是利用一些数据进行密度聚类的效果图片。<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_11.jpg?x=147&y=584&w=250&h=187 "/>图 5: 密度聚类 1<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_11.jpg?x=429&y=584&w=255&h=187 "/>图 6: 密度聚类 2设置半径 \(\mathrm{Eps}\) 为 \(0.04,\mathrm{Minpts}\) 为 5 时,可以将数据三分类,得到图像如图 5 所示,轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.356{、}79.043{、}1.265\) 。设置半径 Eps 为 0.75, Minpts 为 5 时, 可以将数据四分类, 得到图像如图 6所示, 轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.674{、}5185.453{、}0.397\) 。设置半径 Eps 为 0.87, Minpts 为 16 时, 可以将数据三分类, 得到图像如图 7 所示,轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.572{、}2147.144{、}5.919\) 。设置半径 Eps 为 0.2, Minpts 为 5 时, 可以将数据二分类, 得到图像如图 8 所示, 轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.321{、}156.074{、}1.017\) 。设置半径 \(\mathrm{Eps}\) 为 \(0.2,\mathrm{Minpts}\) 为 5 时,可以将数据二分类,得到图像如图 9 所示,轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \( {-} 0.062{、}151.734{、}5.350\) 。<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_12.jpg?x=153&y=206&w=245&h=187 "/>图 7: 密度聚类 3<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_12.jpg?x=432&y=205&w=251&h=189 "/>图 8: 密度聚类 4<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_12.jpg?x=143&y=714&w=255&h=186 "/>图 9: 密度聚类 5<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_12.jpg?x=431&y=715&w=255&h=186 "/>图 10: 密度聚类 6设置半径 Eps 为 1.1, Minpts 为 10 时, 可以将数据四分类, 得到图像如图 10 所示,轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.664{、}1509.256{、}3.146\) 。<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_13.jpg?x=437&y=140&w=246&h=187 "/>图 12: 密度聚类 8<img src="https://cdn.noedgeai.com/a5fee367-df47-4713-89f7-58942dcd50cc_13.jpg?x=150&y=139&w=248&h=187 "/>图 11: 密度聚类 7设置半径 \(\mathrm{Eps}\) 为 0.2,Minpts 为 5 时,可以将数据二分类,得到图像如图 11 所示,轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.045{、}13.449{、}5.843\) 。设置半径 Eps 为 0.9, Minpts 为 15 时, 可以将数据四分类, 得到图像如图 12 所示,轮廓系数、 \(\mathrm{CH}\) score、 \(\mathrm{DBI}\) 分别为 \(0.664{、}4527.194{、}1.435\) 。从上面对八个数据集进行的密度聚类, 我们可以看出聚类达到了很好的效果, 不同分布结构的数据在设置不同的参数后都可以很好的被分类, 这样相比 kmeans 适用的范围更广, 缺点是算法相对于 kmeans 更复杂, 而且需要调整合适的参数才能得到较好的结果。## 6 总结这次的实验任务相对较多, 完成任务花费了不少的时间, 但在这个过程中我也收获了很多东西, 学习到了新的知识, 也加强了自己的代码能力, 在这个过程中也多方请假同学, 并广泛查阅了资料, 能力得到了提升, 对于聚类的了解增强了, 运用能力也得到了强化。## A K-means 程序代码KMEANS IRIS 程序 - kmeans.py \# -*- coding:utf-8 -*-\# Author : JackZhu\# Data : 2021/5/10 23:10 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="keyword">import</span> sklearn <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> scale <span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> silhouette_score <span class="keyword">class</span> <span class="title class_">Kmeans</span> ():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,dat,k</span>): data=scale(dat) self.data=data</span><br><span class="line">self.row,self.col \( = \) data.shape self.k=k</span><br><span class="line">self.centers=np.ndarray((k,self.col))</span><br><span class="line">choices=random.choices (<span class="built_in">range</span>(self.row), k=k) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">self.centers[i,:]=self.data[choices[i],:]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self</span>):</span><br><span class="line">count \( = <span class="number">0</span>\)</span><br><span class="line"><span class="keyword">while</span>(count&lt;<span class="number">15</span>):</span><br><span class="line">self.labels=np.zeros((self.row)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.data.shape[<span class="number">0</span>]): dis=[]</span><br><span class="line"><span class="keyword">for</span> \(j\) <span class="keyword">in</span> <span class="built_in">range</span>(self.k):</span><br><span class="line">dis.append(np.linalg.norm(self.data[i,:]-self.centers[j,:],axis=<span class="number">0</span>)) lab=np.argmin(dis,axis=<span class="number">0</span>) self.labels [i]=lab self.result \( = \&#123;\&#125;\)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.k):</span><br><span class="line"><span class="built_in">type</span>=np.where(self.labels==i) [<span class="number">0</span>] self.result[i]=<span class="built_in">type</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">type</span>) == <span class="number">0</span> :</span><br><span class="line">self.centers \(\lbrack i, : \rbrack = <span class="number">0</span>\)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.centers [i,:]=np.mean(self.data[<span class="built_in">type</span>,:],axis=<span class="number">0</span>)</span><br><span class="line">count \( + = <span class="number">1</span>\)</span><br><span class="line"><span class="keyword">return</span> self.centers, self.result, self.labels</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">self</span>):</span><br><span class="line">tsne \( = TSNE\) (n_components \( = <span class="number">2</span>\) ,</span><br><span class="line">learning_rate=<span class="number">100</span>).fit_transform(self.data)</span><br><span class="line">pca \( = \) PCA().fit_transform(self.data) plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>)) plt.subplot (<span class="number">121</span>)</span><br><span class="line">plt.scatter(tsne[:, <span class="number">0</span>], tsne[:, <span class="number">1</span>], c=self.labels) plt.title(<span class="string">&#x27;t-SNE&#x27;</span>) plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.scatter(pca[:, <span class="number">0</span>], pca[:, <span class="number">1</span>], c=self.labels) plt.title(<span class="string">&#x27;PCA&#x27;</span>) plt.colorbar() plt.show()</span><br><span class="line"><span class="keyword">if</span> __name_ == <span class="string">&quot;__main__&quot;</span>: iris=datasets.load_iris() data=iris.data</span><br><span class="line">target=iris.target kmeans=Kmeans (data, <span class="number">3</span>)</span><br><span class="line">centers,results,labels=kmeans.fit() kmeans. imshow()</span><br><span class="line">\(\mathrm&#123;s&#125; = \) silhouette_score(data,labels) <span class="built_in">print</span>(centers) <span class="built_in">print</span>(results) <span class="built_in">print</span>(s)</span><br><span class="line">KMEANS 处理照片程序 - kmeans_photo.py \<span class="comment"># -*- coding:utf-8 -*-\# Author : JackZhu</span></span><br><span class="line">\<span class="comment"># Data : 2021/5/13 12:56 import numpy as np import pandas as pd import sklearn import random</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> scale <span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kmeans</span> () :</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,dat,k</span>): data=scale(dat) self.data=data</span><br><span class="line">self.row,self.col \( = \) data.shape self.k=k</span><br><span class="line">self.centers=np.ndarray((k, self.col))</span><br><span class="line">choices=random.choices (<span class="built_in">range</span>(self.row), k=k) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">self.centers[i,:]=self.data[choices[i],:]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self,counts=<span class="number">15</span></span>):</span><br><span class="line">count \( = <span class="number">0</span>\)</span><br><span class="line"><span class="keyword">while</span>(count&lt;counts):</span><br><span class="line">self.labels=np.zeros((self.row)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.data.shape[<span class="number">0</span>]): dis=[]</span><br><span class="line"><span class="keyword">for</span> \(j\) <span class="keyword">in</span> <span class="built_in">range</span>(self.k):</span><br><span class="line">dis.append(np.linalg.norm(self.data[i,:]-self.centers[j,:],axis=<span class="number">0</span>)) lab=np.argmin(dis,axis=<span class="number">0</span>) self.labels[i]=lab self.result \( = \&#123;\&#125;\)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.k):</span><br><span class="line"><span class="built_in">type</span>=np.where(self.labels==i) [<span class="number">0</span>] self.result[i]=<span class="built_in">type</span> <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">type</span>) \( = = <span class="number">0</span>\) :</span><br><span class="line">self.centers \(\lbrack i, : \rbrack = <span class="number">0</span>\)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.centers [i,:]=np.mean(self.data[<span class="built_in">type</span>,:],axis=<span class="number">0</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> self.centers, self.result</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">self</span>):</span><br><span class="line">tsne \( = TSNE\) (n_components \( = <span class="number">2</span>\) ,</span><br><span class="line">learning_rate=<span class="number">100</span>).fit_transform(self.data)</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">pca \( = PCA()\) .fit_transform(self.data)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot (<span class="number">121</span>)</span><br><span class="line">plt.scatter(tsne[:, <span class="number">0</span>], tsne[:, <span class="number">1</span>], c=self.labels)</span><br><span class="line">plt.title(<span class="string">&#x27;t-SNE&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.scatter(pca[:, <span class="number">0</span>], pca[:, <span class="number">1</span>], c=self.labels)</span><br><span class="line">plt.title(<span class="string">&#x27;PCA&#x27;</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_img</span>(<span class="params">self,row,col</span>):</span><br><span class="line">img=self.labels.reshape(row, col)</span><br><span class="line">\(\mathrm&#123;im&#125; = \) Image.new(<span class="string">&quot;RGB&quot;</span>,(row,col)) \<span class="comment"># 创建图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line"><span class="keyword">for</span> \(j\) <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line"><span class="keyword">if</span> \(\operatorname&#123;img&#125;\lbrack i,j\rbrack = = <span class="number">0</span>\) :</span><br><span class="line">im.putpixel((i,j),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">if</span> \(\operatorname&#123;img&#125;\lbrack i,j\rbrack = = <span class="number">1</span>\) :</span><br><span class="line">im.putpixel((i, j), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">if</span> \(\operatorname&#123;img&#125;\lbrack i,j\rbrack = = <span class="number">2</span>\) :</span><br><span class="line">im.putpixel((i,j), \((<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)\) )</span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">&#x27;result.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;./2.bmp&#x27;</span></span><br><span class="line">\<span class="comment"># path=f&#x27;H:/Python_code/Pattern Recognition/kmeans/kmeans/kmeans图片/3.bmp&#x27; file=Image.open(path,&#x27;r&#x27;) file=np.array(file) row,col,_=file.shape data=file.reshape \((&#123;-&#125;1,3)\) kmeans=Kmeans(data,3)</span></span><br><span class="line">centers, results=kmeans. fit (<span class="number">10</span>) kmeans.imshow()</span><br><span class="line">kmeans.plot_img(row, col) <span class="built_in">print</span> (centers) <span class="built_in">print</span> (results)</span><br><span class="line"></span><br><span class="line"><span class="comment">## B DBSCAN 程序代码</span></span><br><span class="line"></span><br><span class="line">DBSCAN 程序 - 密度聚类.py</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">\<span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">\<span class="comment"># Author : JackZhu</span></span><br><span class="line">\<span class="comment"># Data : 2021/5/9 15:16 \# 调用科学计算包与绘图包 import numpy as np import random</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> matplotlib.colors <span class="keyword">as</span> mcolors <span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> silhouette_score, calinski_harabasz_score,</span><br><span class="line">davies_bouldin_score</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calDist</span> \(\left( \mathrm&#123;X&#125;<span class="number">1</span>,\mathrm&#123;X&#125;<span class="number">2</span> \right)\) :</span><br><span class="line"><span class="built_in">sum</span> \( = <span class="number">0</span>\)</span><br><span class="line"><span class="keyword">for</span> \(x1,x2\) <span class="keyword">in</span> \(<span class="built_in">zip</span>(X1,X2)\) : <span class="built_in">sum</span> \( + = (x1 &#123;-&#125; x2) * * <span class="number">2</span>\)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span> ** <span class="number">0.5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNeibor</span>(<span class="params">data, dataSet, e</span>):</span><br><span class="line">res \( = \lbrack\rbrack\)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dataSet.shape[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">if</span> calDist(data, dataSet[i]) &lt; e: res.append(i)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DBSCAN</span>(<span class="params">dataSet, e, minPts</span>):</span><br><span class="line">coreObjs \( = \&#123;\&#125;\<span class="comment">#\) 初始化核心对象集合 \(\mathrm&#123;C&#125; = \&#123;\&#125;\)</span></span><br><span class="line">\(\mathrm&#123;n&#125; = \) dataSet.shape \(\lbrack <span class="number">0</span>\rbrack\)</span><br><span class="line">\<span class="comment"># 找出所有核心对象, key 是核心对象的index, value是 - 邻域中对象的index for i in range(n):</span></span><br><span class="line">neibor \( = \) getNeibor(dataSet[i],dataSet,e) <span class="keyword">if</span> <span class="built_in">len</span>(neibor) &gt;= minPts: coreObjs [i] = neibor oldCoreObjs \( = \) coreObjs.copy() \(\mathrm&#123;k&#125; = <span class="number">0</span>\<span class="comment">#\) 初始化聚类簇数</span></span><br><span class="line">notAccess = <span class="built_in">list</span>(<span class="built_in">range</span>(n)) \<span class="comment"># 初始化未访问样本集合 (索引) while len(coreObjs) &gt; 0:</span></span><br><span class="line">O1dNotAccess = []</span><br><span class="line">OldNotAccess.extend(notAccess) cores \( = \operatorname&#123;coreObjs.keys&#125;()\) \<span class="comment"># 随机选取一个核心对象</span></span><br><span class="line">randNum = random.randint \(\left( <span class="number">0</span>,<span class="number">1</span>\text&#123;en(cores) -<span class="number">1</span>&#125; \right)\) cores \( = \) <span class="built_in">list</span>(cores) core \( = \) cores \(\left\lbrack \text&#123;randNum&#125; \right\rbrack\) queue \( = \lbrack\rbrack\)</span><br><span class="line">queue.append(core)</span><br><span class="line">notAccess. remove (core) <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>: \(q = \) queue \(\lbrack <span class="number">0</span>\rbrack\) <span class="keyword">del</span> queue [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> \(q\) <span class="keyword">in</span> oldCoreObjs.keys():</span><br><span class="line">delte \( = \) [val <span class="keyword">for</span> val <span class="keyword">in</span> oldCoreObjs[q] <span class="keyword">if</span> val <span class="keyword">in</span> notAccess] \(\<span class="comment">#\Delta = \mathrm&#123;N&#125;\left( \mathrm&#123;q&#125; \right)\Gamma\)</span></span><br><span class="line">queue.extend(delte) \<span class="comment"># 将 \(\Delta\) 中的样本加入队列Q</span></span><br><span class="line">notAccess \( = \) [val <span class="keyword">for</span> val <span class="keyword">in</span> notAccess <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> delte] \<span class="comment">#</span></span><br><span class="line">\(\Gamma = \Gamma &#123;\smallsetminus&#125; \Delta\)</span><br><span class="line">\(\mathrm&#123;k&#125; + = <span class="number">1</span>\)</span><br><span class="line">\(\mathrm&#123;C&#125;\left\lbrack \mathrm&#123;k&#125; \right\rbrack = \) [val <span class="keyword">for</span> val <span class="keyword">in</span> OldNotAccess <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> notAccess] <span class="keyword">for</span> \(x\) <span class="keyword">in</span> \(C\lbrack k\rbrack\) :</span><br><span class="line"><span class="keyword">if</span> \(x\) <span class="keyword">in</span> coreObjs.keys(): <span class="keyword">del</span> coreObjs [x]</span><br><span class="line"><span class="keyword">return</span> \(\mathrm&#123;C&#125;\) <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">C, D</span>):</span><br><span class="line">colors = <span class="built_in">list</span> (mcolors. TABLEAU_COLORS.keys())</span><br><span class="line">predict \( = \) np.zeros ((D.shape [<span class="number">0</span>],D.shape [<span class="number">1</span>] + <span class="number">1</span>)) \(j = <span class="number">0</span>\)</span><br><span class="line">keys \( = \) C. keys() <span class="built_in">print</span>(keys) <span class="keyword">for</span> \(\mathrm&#123;k&#125;\) <span class="keyword">in</span> keys: <span class="keyword">for</span> \(i\) <span class="keyword">in</span> \(C\lbrack k\rbrack\) :</span><br><span class="line">predict \(\lbrack j,<span class="number">0</span> : <span class="number">2</span>\rbrack = D\lbrack i\rbrack\) predict \(\lbrack j,<span class="number">2</span>\rbrack = k\) \(j = j + <span class="number">1</span>\)</span><br><span class="line">plt.scatter(D[i, <span class="number">0</span>], D[i, <span class="number">1</span>], color=colors[k + <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="keyword">return</span> predict <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">path \( = \) ,/data-密度聚类/square1.mat’ data \( = \) scio.loadmat (path) [<span class="string">&#x27;square1&#x27;</span>] \<span class="comment"># plt.scatter(data[:,0],data[:,1]) \# plt.show()</span></span><br><span class="line">\(D = \operatorname&#123;data&#125;\lbrack : ,<span class="number">0</span> : <span class="number">2</span>\rbrack\) label \( = \) data \(\lbrack <span class="number">2</span>\rbrack\)</span><br><span class="line">\(\mathrm&#123;C&#125; = \operatorname&#123;DBSCAN&#125;\left( \mathrm&#123;D&#125;,<span class="number">0.9</span>,<span class="number">15</span> \right)\) predict \( = \operatorname&#123;draw&#125;(C,D)\)</span><br><span class="line">s1 = metrics.silhouette_score(predict[:, <span class="number">0</span>:<span class="number">2</span>], predict[:, <span class="number">2</span>],</span><br><span class="line">metric=<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line">s2 = calinski_harabasz_score(predict[:,<span class="number">0</span>:<span class="number">2</span>],predict[:,<span class="number">2</span>]) \<span class="comment">#计算CH</span></span><br><span class="line">score</span><br><span class="line">s3 = davies_bouldin_score(predict[:, <span class="number">0</span>:<span class="number">2</span>], predict[:, <span class="number">2</span>]) \<span class="comment"># 计算 DBI print(s1, s2, s3)</span></span><br><span class="line"><span class="keyword">if</span> __name_ == <span class="string">&#x27;__main__&#x27;</span>: \(\operatorname&#123;main&#125;()\)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文使用了 K-means 和 DBSCAN 两种聚类方法, 较好的完成了聚类任务, 并将得到的结果使用了 t-SNE 和 PCA 两种方法进行降维可视化,从而更好的得到聚类的效果,并计算了轮廓系数、 \(\mathrm{CH}\) score、 DBI 这些聚类指标, 对于 K-means 方法还使用了图片进行聚类, 使得效果更加直观, 实验效果非常好。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习作业——高光谱遥感特征选择</title>
    <link href="http://example.com/2021/04/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%E2%80%94%E2%80%94%E9%AB%98%E5%85%89%E8%B0%B1%E9%81%A5%E6%84%9F%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/"/>
    <id>http://example.com/2021/04/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%E2%80%94%E2%80%94%E9%AB%98%E5%85%89%E8%B0%B1%E9%81%A5%E6%84%9F%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/</id>
    <published>2021-04-28T12:29:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h2><p>1 实验说明 1<br>2 数据集 1<br>3 特征选择 2<br>3.1 基本方法 2<br>3.2 单变量选择法 2<br>3.3 递归特征消除法 2<br>4 代码实现 2<br>4.1 获取数据 2<br>4.2 数据预处理 3<br>4.3 定义单变量选择函数 3<br>4.4 定义递归特征选择法函数 4<br>4.5 定义获得数据函数 4<br>4.6 定义评定函数 5<br>4.7 主函数 5<br>5 结果分析 6<br>6 优缺点分析 6<br>6.1 Filter 6<br>6.2 Wrapper 7<br>7 总结 7<br>A 作业代码 8</p><h2 id="1-实验说明"><a href="#1-实验说明" class="headerlink" title="1 实验说明"></a>1 实验说明</h2><p>本次实验的目标为利用提供的高光谱遥感数据集进行特征选择, 有以下实验要求:</p><ul><li>利用给定的数据集, 进行数据特征 (波段) 选择。</li><li>具体选择方法和策略不限制。</li><li>实验结果度量标准不少于 4 种, 结合课程学习中的指标。</li><li>建议对比不同类型的选择方法, 给出各种方法的优缺点。<br>数据集给出的数据维数较高, 其中存在了许多冗余的信息以及无关信息, 如果把这些实际的数据直接放到神经网络中则很难得出较好的结果, 而且计算量大大增加, 因此需要进行特征提取, 把影响实验效果的特征清除掉, 用较少的特征对实验结果进行分析。</li></ul><h2 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2 数据集"></a>2 数据集</h2><p>在本次实验中, 提供了多种数据可以选择, 由于目标在于实现过程, 数据集选择无关,<br>此处选择了肯尼迪航天中心数据 KSC。<br>NASA AVIRIS (机载可见光&#x2F;红外成像光谱仪) 仪器于 1996 年 3 月 23 日在佛罗里达州肯尼迪航天中心 (KSC) 上空获取数据。AVIRIS 采集 224 个波段的数据, 这些波段的宽度为 10 纳米, 中心波长为 400-2500 纳米。从大约 20 公里的高度获得的 KSC 数据具有 18 米的空间分辨率。去除吸水率和低信噪比波段后, 用 176 个波段进行分析。训练数据是利用肯尼迪航天中心提供的彩色红外摄影和陆地卫星专题制图仪 (TM) 图像绘制的土地覆盖图选择的。植被分类方案是由 KSC 人员制定的, 目的是确定在陆地卫星和这些 AVIRIS 数据的空间分辨率上可辨别的功能类型。由于某些植被类型的光谱特征具有相似性, 因此很难区分这种环境下的土地覆盖。为便于分类, 为现场定义了 13 个类别, 代表该环境中出现的各种土地覆盖类型。<br>数据集预览如下图所示:</p><img src="https://cdn.noedgeai.com/34077bd4-b209-4949-97d0-44f33cab3459_2.jpg?x=251&y=680&w=342&h=294 "/><p>图 1: KSC 数据预览图</p><p>数据集尺寸为 (512 {\times} 614 {\times} 176) ,大小为 (56.8\mathrm{MB}) ,相应的结果尺寸为 (512 {\times} 614) ,大小<br>为 (3.2\mathrm{KB}) 。</p><h2 id="3-特征选择"><a href="#3-特征选择" class="headerlink" title="3 特征选择"></a>3 特征选择</h2><h2 id="3-1-基本方法"><a href="#3-1-基本方法" class="headerlink" title="3.1 基本方法"></a>3.1 基本方法</h2><p>一个典型机器学习问题是通过样本特征预测对应的值, 如果样本特征少, 可以增加特征, 而有时候特征较多, 则需要较少一些特征, 较少过拟合, 提高模型泛化能力, 加快模型训练速度并获得更好的性能,<br>特征选择主要有三种选择方法:</p><ol><li>过滤法 (Filter) : 按照发散性或者相关性对各个特征进行评分, 设定阈值或者待选择阈值的个数, 选择特征。</li><li>包裹法 (Wrapper): 根据目标函数, 每次选择若干特征或者排除若干特征, 直到选择出最佳的子集。</li><li>嵌入法 (Embedding): 先使用某些机器学习的算法和模型进行训练, 得到各个特征的权值系数, 根据系数从大到小选择特征。类似于 Filter 方法, 但是是通过训练来确定特征的优劣。</li></ol><h2 id="3-2-单变量选择法"><a href="#3-2-单变量选择法" class="headerlink" title="3.2 单变量选择法"></a>3.2 单变量选择法</h2><p>单变量特征选择是通过选择那些基于单变量统计检验 (univariate statistical tests) 得出的最优特征来实现的, 这是 Filter 法的一种。它可以看作是估计器的一个预处理步骤。这里使用了 Sklearn 中的 Select KBest 对每个特征进行评分, 并选择出指定数目的特征, 从而达到选择的效果, 这种方法并未考虑到不同特征之间的相互关系, 本题中选择了 50 个特征。</p><h2 id="3-3-递归特征消除法"><a href="#3-3-递归特征消除法" class="headerlink" title="3.3 递归特征消除法"></a>3.3 递归特征消除法</h2><p>递归特征消除 (Recursive feature elimination) 是 Wrapper 法中的一种, 其主要思想是反复构建模型, 然后选出最好的 (或者最差的) 特征 (根据系数来选), 把选出来的特征放到一边, 然后在剩余的特征上重复这个过程, 直到遍历了所有的特征。在这个过程中被消除的次序就是特征的排序, 本题中选择了 30 个特征的组合。<br>RFE 的稳定性很大程度上取决于迭代时, 底层用的哪种模型。比如 RFE 采用的是普通的回归 (LR), 没有经过正则化的回归是不稳定的, 那么 RFE 就是不稳定的。假如采用的是 Lasso&#x2F;Ridge, 正则化的回归是稳定的, 那么 RFE 就是稳定的。</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4 代码实现"></a>4 代码实现</h2><h2 id="4-1-获取数据"><a href="#4-1-获取数据" class="headerlink" title="4.1 获取数据"></a>4.1 获取数据</h2><p>此处建立函数读取获取数据并将数据从三维降到二维, 将对应的标签从二维降到一维,<br>降维后数据的尺寸为 (314368 {\times} 176) 。<br>其中一个重要的问题是提供的大部分数据是无用的, 即数据对应的标签为 0 , 因此这里<br>仅提取出标签不为零的数据,提取后数据尺寸为 (5211 {\times} 176) ,相关代码如下:</p><hr><p>def get_data():<br>dat &#x3D; loadmat(‘.&#x2F;高光谱数据集&#x2F;KSC.mat’) [‘KSC’]</p><hr><hr><p>(1\mathrm{ab} &#x3D; 1) oadmat(’.&#x2F;高光谱数据集&#x2F;KSC_gt.mat’) [‘KSC_gt’]<br>dat ( &#x3D; ) dat.reshape (({-}1,176))<br>lab ( &#x3D; ) lab.reshape (({-}1))<br>print(dat.shape)<br>data, label &#x3D; [], []<br>for i in range(dat.shape[0]):<br>if lab[i].all() !&#x3D; 0:<br>data.append(dat[i, :])<br>label.append(lab[i])<br>data ( &#x3D; ) np.array (data)<br>label ( &#x3D; ) np.array(label)<br>return data, label</p><hr><h2 id="4-2-数据预处理"><a href="#4-2-数据预处理" class="headerlink" title="4.2 数据预处理"></a>4.2 数据预处理</h2><p>这里首先利用 sklearn 中的 processing 对数据进行标准化处理, 然后消除方差为 0 的<br>特征, 并利用中位数进行变量的选择。 def process(data):<br>data ( &#x3D; ) preprocessing. StandardScaler (). fit_transform(data) print(‘shape&#x3D;{}’.format(data.shape))<br>selector ( &#x3D; \operatorname{VarianceThreshold}()#) 实例化,不填参数默认方差为 0 data ( &#x3D; ) selector.fit_transform(data) print(data.shape)<br>median_num &#x3D; np.median(data)<br>data ( &#x3D; ) VarianceThreshold (median_num).fit_transform(data) print(data.shape) return data</p><h2 id="4-3-定义单变量选择函数"><a href="#4-3-定义单变量选择函数" class="headerlink" title="4.3 定义单变量选择函数"></a>4.3 定义单变量选择函数</h2><p>此处定义了单变量选择函数, 利用 SelectKBest 进行评分, 得到不同特征的得分以及<br>pvalue, 并得出是否选择, 并得到选出的 50 个特征的索引。</p><hr><p>def select_k(data, label, k):<br>results ( &#x3D; ) SelectKBest (f_classif,k&#x3D;k).fit(data,label)<br>print(results)<br>features ( &#x3D; ) pd.DataFrame({<br>“score”: results.scores_<br>“pvalue”: results.pvalues_,<br>“select”: results.get_support()</p><hr><hr><p>\})<br>features.sort_values(“score”, ascending&#x3D;False)<br>print(features)<br>index ( &#x3D; ) results.get_support(indices&#x3D;True)<br>print(index)<br>return index</p><hr><p>此处简要列出几种特征得分、pvalue 以及选择情况如下图所示。</p><table><thead><th>Index</th><th>score</th><th>pvalue</th><th>select</th></thead><tr><td>128</td><td>2727.83</td><td>0</td><td>True</td></tr><tr><td>129</td><td>2721.86</td><td>0</td><td>True</td></tr><tr><td>130</td><td>2713.15</td><td>0</td><td>True</td></tr><tr><td>131</td><td>3.10662</td><td>0.000214373</td><td>False</td></tr><tr><td>132</td><td>8.8046</td><td>6.66051e-17</td><td>False</td></tr><tr><td>133</td><td>1.56247</td><td>0.0951564</td><td>False</td></tr><tr><td>134</td><td>2085.42</td><td>0</td><td>False</td></tr><tr><td>135</td><td>2101.52</td><td>0</td><td>False</td></tr><tr><td>136</td><td>2107.9</td><td>0</td><td>False</td></tr><tr><td>137</td><td>2116.73</td><td>0</td><td>False</td></tr><tr><td>138</td><td>1.36264</td><td>0.17608</td><td>False</td></tr><tr><td>139</td><td>2165.66</td><td>日</td><td>True</td></tr><tr><td>140</td><td>2219.98</td><td>®</td><td>True</td></tr><tr><td>141</td><td>1.06688</td><td>0.383812</td><td>False</td></tr></table><p>图 2: 特征得分预览图</p><p> 4.4 定义递归特征选择法函数<br>此处同样获取索引, 在本题中, 选择了 30 个特征的组合进行特征选择, 代码如下。<br>def rfe(data, label, n):<br>results ( &#x3D; ) RFE(estimator&#x3D;LogisticRegression(),n_features_to_select&#x3D;n) print(results)<br>results.fit(data, label)<br>index &#x3D; results.get_support(indices&#x3D;True) print(index) return index</p><h2 id="4-5-定义获得数据函数"><a href="#4-5-定义获得数据函数" class="headerlink" title="4.5 定义获得数据函数"></a>4.5 定义获得数据函数</h2><h2 id="此函数目的为获取指定索引特征的数据并划分训练测试集-即将上文中选出的指定特征索引数据选出来。"><a href="#此函数目的为获取指定索引特征的数据并划分训练测试集-即将上文中选出的指定特征索引数据选出来。" class="headerlink" title="此函数目的为获取指定索引特征的数据并划分训练测试集, 即将上文中选出的指定特征索引数据选出来。"></a>此函数目的为获取指定索引特征的数据并划分训练测试集, 即将上文中选出的指定特征索引数据选出来。</h2><p>def select_index_data(index, data, label):<br>data_after ( &#x3D; )<br>for i in index:<br>data_after.append(data[:, i])<br>data_after ( &#x3D; ) np.array (data_after).transpose()<br>print(data_after.shape)<br>print(label.shape)<br>return train_test_split(data_after,label,test_size&#x3D;0.3,<br>random_state&#x3D;1)</p><hr><h2 id="4-6-定义评定函数"><a href="#4-6-定义评定函数" class="headerlink" title="4.6 定义评定函数"></a>4.6 定义评定函数</h2><p>此处利用 SVM 来测定特征选择的效果, 并利用 sklearn 中的库函数来进行评定, 相关<br>代码如下。<br>def measure_feature(train_data, test_data, train_label, test_label, gamma,<br>c):<br>clf &#x3D; sklearn.svm. SVC (kernel&#x3D;’poly’, gamma&#x3D;gamma, C&#x3D;c) clf.fit(train_data, train_label) predict ( &#x3D; ) clf.predict(test_data) clf.get_params(deep&#x3D;True)<br>acc ( &#x3D; ) sklearn.metrics.accuracy_score(test_label,predict)<br>(f1 &#x3D; ) sklearn.metrics.f1_score(test_label,predict,average&#x3D;’micro’) recall ( &#x3D; ) metrics.recall_score(test_label,predict,average&#x3D;’micro’) precision ( &#x3D; ) metrics.precision_score(test_label,predict,<br>average&#x3D;’micro’)<br>return acc, f1, recall, precision</p><h2 id="4-7-主函数"><a href="#4-7-主函数" class="headerlink" title="4.7 主函数"></a>4.7 主函数</h2><p>这部分使用了上文中定义的函数, 首先读取数据, 然后进行数据预处理, 之后分别利用这两种方法, 并提取出特征对应的索引, 之后划分出训练集和测试集来对特征提取的结果进行测试, 最后分别展示出分别用分类准确率, f1 分数, 召回率, 精确度等指标来测试训练集和测试集的效果, 代码如下。</p><hr><p>if _<em>name</em> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>data, label &#x3D; get_data()<br>data ( &#x3D; ) process(data)<br># rfc(data,label)<br>index ( &#x3D; ) select_k(data,label,k&#x3D;50)<br># index &#x3D; rfe(data, label,n&#x3D;30)<br>train_data, test_data, train_label, test_label &#x3D;<br>select_index_data(index, data, label)</p><hr><hr><p>print(train_data.shape, test_data.shape, train_label.shape,<br>test_label.shape)<br>gamma, (c &#x3D; 0.125,60)<br>train_acc,train_f1,train_recall,train_precision ( &#x3D; )<br>measure_feature(train_data, train_data, train_label, train_label,<br>gamma, c)<br>test_acc, test_f1, test_recall, test_precision &#x3D;<br>measure_feature(train_data, test_data, train_label,<br>test_label, gamma, c)<br>print(train_acc, test_acc)<br>print(train_f1, test_f1)<br>print(train_recall, test_recall)<br>print(train_precision, test_precision)</p><hr><h2 id="5-结果分析"><a href="#5-结果分析" class="headerlink" title="5 结果分析"></a>5 结果分析</h2><p>表 1: 训练测试结果</p><table><thead><th></th><th>accuracy</th><th>f1 score</th><th>recall</th><th>precision</th></thead><tr><td>UFS 训练集</td><td>0.943</td><td>0.943</td><td>0.943</td><td>0.943</td></tr><tr><td>UFS 测试集</td><td>0.902</td><td>0.902</td><td>0.902</td><td>0.902</td></tr><tr><td>RFE 训练集</td><td>0.994</td><td>0.994</td><td>0.994</td><td>0.994</td></tr><tr><td>RFE 测试集</td><td>0.948</td><td>0.948</td><td>0.948</td><td>0.948</td></tr></table><p>由上表可知, RFE 在选择的特征数少于 UFS 的情况下, 效果仍好于 UFS。在本数据集下, 四种指标结果相同。对于 UFS 法, 优点是直观, 可解释性更好, 但是最优的组合效果并不一定是最好的。对于 RFE 法, 计算量更大, 需要考虑不同组合的效果。递归式特征消除的主要思路是反复建立多种模型, 每一次根据系数的不挑出差的特征, 并去除挑出来的特征, 然后在剩余的特征上重复该过程, 直到遍历了所有的特征。</p><h2 id="6-优缺点分析"><a href="#6-优缺点分析" class="headerlink" title="6 优缺点分析"></a>6 优缺点分析</h2><h2 id="6-1-Filter"><a href="#6-1-Filter" class="headerlink" title="6.1 Filter"></a>6.1 Filter</h2><p>过滤式特征选择的评价标准从数据集本身的内在性质获得, 与特定的学习算法无关, 因此具有具有较好的通用性。通常选择和类别相关度大的特征或者特征子集。过滤式特征选择的研究者认为, 相关度较大的特征或者特征自己会在分类器上获得较高的准确率, dash 和 liu 把过滤式特征选择的评价标准分为四种, 即距离度量, 信息度量, 关联度量以及一致性度量<br>优点: 算法的通用性强, 省去了分类器的训练步骤, 算法复杂性低, 因而适用于大规模<br>数据集, 可以快速去除大量不相关的特征, 作为特征的预筛选器非常合适的<br>缺点: 由于算法的评价标准独立于特定的学习算法, 所选的特征子集在分类准确率方<br>面通常低于 wrapper 方法。</p><h2 id="6-2-Wrapper"><a href="#6-2-Wrapper" class="headerlink" title="6.2 Wrapper"></a>6.2 Wrapper</h2><p>封装式特征选择即 wrapper 方法利用学习算法的性能来评价特征自己的优劣, 因此, 对<br>于一个待评价的特征子集, wrapper 方法需要<br>训练一个分类器, 根据分类器的性能对该特征子集进行评价, wrapper 方法中用以评价特征的学习算法是多种多样的, 例如决策树、神经网路、贝叶斯分类器、近邻法以及支持向量机等等, 本文就使用的支持向量机来进行评价。<br>优点: 相对于 filter 方法, wrapper 方法找到的特征子集分类性能通常更好<br>缺点: wrapper 方法选出的特征通用性不强, 当改变学习算法时, 需要针对该学习算法重新进行特征选择, 由于每次对子集的评价都要进行分类器的训练和测试, 所以算法计算复杂度很高, 尤其对于大规模数据集来说, 算法的执行时间越长。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h2><p>在这次实验中, 开始在理解题意方面遇到了很多问题, 后来经过多方询问才明白特征提取的几种方法如何实现。这次实验中我通过广泛查询资料了解到了相关的知识, 也认真写代码来完成任务, 这份作业的完成确实比较艰巨, 一份顶多份, 但是我还是有很大的收获, 能力也得到了提升。</p><h2 id="A-作业代码"><a href="#A-作业代码" class="headerlink" title="A 作业代码"></a>A 作业代码</h2><p>程序 - 高光谱.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier <span class="keyword">as</span> RFC</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest, f_classif</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    dat = loadmat(<span class="string">&#x27;./高光谱数据集/KSC.mat&#x27;</span>)[<span class="string">&#x27;KSC&#x27;</span>]</span><br><span class="line">    lab = loadmat(<span class="string">&#x27;./高光谱数据集/KSC_gt.mat&#x27;</span>)[<span class="string">&#x27;KSC_gt&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    dat = dat.reshape(-<span class="number">1</span>, <span class="number">176</span>)</span><br><span class="line">    lab = lab.reshape(-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(dat.shape)</span><br><span class="line"></span><br><span class="line">    data, label = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dat.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> lab[i].<span class="built_in">all</span>() != <span class="number">0</span>:</span><br><span class="line">            data.append(dat[i, :])</span><br><span class="line">            label.append(lab[i])</span><br><span class="line"></span><br><span class="line">    data = np.array(data)</span><br><span class="line">    label = np.array(label)</span><br><span class="line">    <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">data</span>):</span><br><span class="line">    data = preprocessing.StandardScaler().fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;shape=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(data.shape))</span><br><span class="line">    selector = VarianceThreshold()  <span class="comment"># 实例化，不填参数默认方差为0</span></span><br><span class="line">    data = selector.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(data.shape)</span><br><span class="line">    median_num = np.median(data)</span><br><span class="line">    data = VarianceThreshold(median_num).fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(data.shape)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># acc = cross_val_score(KNN(), data, label, cv=5).mean()</span></span><br><span class="line"><span class="comment"># print(&quot;accuracy:&#123;&#125;,time:&#123;&#125;&quot;.format(acc,time.time()-start))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_k</span>(<span class="params">data, label, k</span>):</span><br><span class="line">    results = SelectKBest(f_classif, k=k).fit(data, label)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line">    features = pd.DataFrame(&#123;</span><br><span class="line">        <span class="string">&quot;score&quot;</span>: results.scores_,</span><br><span class="line">        <span class="string">&quot;pvalue&quot;</span>: results.pvalues_,</span><br><span class="line">        <span class="string">&quot;select&quot;</span>: results.get_support()</span><br><span class="line">    &#125;)</span><br><span class="line">    features.sort_values(<span class="string">&quot;score&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(features)</span><br><span class="line">    index = results.get_support(indices=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rfe</span>(<span class="params">data, label, n</span>):</span><br><span class="line">    results = RFE(estimator=LogisticRegression(), n_features_to_select=n)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line">    results.fit(data, label)</span><br><span class="line">    index = results.get_support(indices=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rfc</span>(<span class="params">data, label</span>):</span><br><span class="line">    RFC_ = RFC(n_estimators=<span class="number">50</span>, random_state=<span class="number">0</span>)</span><br><span class="line">    X_embedded = SelectFromModel(RFC_, threshold=<span class="number">0.005</span>).fit_transform(data, label)</span><br><span class="line">    result = sklearn.model_selection.cross_val_score(RFC_, X_embedded, label, cv=<span class="number">5</span>).mean()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_index_data</span>(<span class="params">index, data, label</span>):</span><br><span class="line">    data_after = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">        data_after.append(data[:, i])</span><br><span class="line">    data_after = np.array(data_after).transpose()</span><br><span class="line">    <span class="built_in">print</span>(data_after.shape)</span><br><span class="line">    <span class="built_in">print</span>(label.shape)</span><br><span class="line">    <span class="keyword">return</span> train_test_split(data_after, label, test_size=<span class="number">0.3</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">measure_feature</span>(<span class="params">train_data, test_data, train_label, test_label, gamma, c</span>):</span><br><span class="line">    clf = sklearn.svm.SVC(kernel=<span class="string">&#x27;poly&#x27;</span>, gamma=gamma, C=c)</span><br><span class="line">    clf.fit(train_data, train_label)</span><br><span class="line">    predict = clf.predict(test_data)</span><br><span class="line">    clf.get_params(deep=<span class="literal">True</span>)</span><br><span class="line">    acc = sklearn.metrics.accuracy_score(test_label, predict)</span><br><span class="line">    f1 = sklearn.metrics.f1_score(test_label, predict, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line">    recall = metrics.recall_score(test_label, predict, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line">    precision = metrics.precision_score(test_label, predict, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> acc, f1, recall, precision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data, label = get_data()</span><br><span class="line">    data = process(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># rfc(data,label)</span></span><br><span class="line">    index = select_k(data, label, k=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># index = rfe(data, label,n=30)</span></span><br><span class="line">    train_data, test_data, train_label, test_label = select_index_data(index, data, label)</span><br><span class="line">    <span class="built_in">print</span>(train_data.shape, test_data.shape, train_label.shape, test_label.shape)</span><br><span class="line">    gamma, c = <span class="number">0.125</span>, <span class="number">60</span></span><br><span class="line">    train_acc, train_f1, train_recall, train_precision = measure_feature(train_data, train_data, train_label,</span><br><span class="line">                                                                         train_label, gamma, c)</span><br><span class="line">    test_acc, test_f1, test_recall, test_precision = measure_feature(train_data, test_data, train_label, test_label,</span><br><span class="line">                                                                     gamma, c)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(train_acc, test_acc)</span><br><span class="line">    <span class="built_in">print</span>(train_f1, test_f1)</span><br><span class="line">    <span class="built_in">print</span>(train_recall, test_recall)</span><br><span class="line">    <span class="built_in">print</span>(train_precision, test_precision)</span><br><span class="line">    <span class="comment"># print(&#x27;训练集准确率为&#123;:.4f&#125;，测试集准确率为&#123;:.4f&#125;&#x27;.format(train_acc, test_acc))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目-录&quot;&gt;&lt;a href=&quot;#目-录&quot; class=&quot;headerlink&quot; title=&quot;目 录&quot;&gt;&lt;/a&gt;目 录&lt;/h2&gt;&lt;p&gt;1 实验说明 1&lt;br&gt;2 数据集 1&lt;br&gt;3 特征选择 2&lt;br&gt;3.1 基本方法 2&lt;br&gt;3.2 单变量选择法 2&lt;br&gt;3</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习报告——数据分类的实现</title>
    <link href="http://example.com/2021/04/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2021/04/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-04-11T12:29:37.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h2><p>1 数据集 1<br>2 logistic 回归与神经网络 1<br>2.1 背景知识 1<br>2.1.1 线性及 sigmoid 函数 1<br>2.1.2 计算误差及修正参数 1<br>2.2 代码实现及结果分析 2<br>3 高斯判别分析 3<br>3.1 背景知识 3<br>3.2 代码实现 4<br>4 贝叶斯分类 4<br>4.1 背景知识 4<br>4.2 代码实现 4<br>5 性能分析 4<br>6 时效分析 4<br>7 影响因素分析 5<br>7.1 logistic 分类 5<br>8 总结 5<br>A logistic 分类代码 6<br>B GDA 分类代码 8<br>C 贝叶斯分类代码 11<br>D 贝叶斯库函数调用分类代码 12</p><h2 id="1-数据集"><a href="#1-数据集" class="headerlink" title="1 数据集"></a>1 数据集</h2><p>在本次作业中, 在 UCI 中选取了 Sonar 数据集进行分类, 该数据集具有 208 个样本,<br>一共 60 个维度。<br>任务是训练网络以区分反弹的声纳信号从金属圆柱上弹下来和从大致呈圆柱形的岩石弹起。每个模式是一组 60 个数字, 范围在 0.0 到 1.0 之间。每个数字代表在特定时间段内积分的特定频段内的能量。较高频率的积分孔径在时间上较晚出现, 因为这些频率是在线性调频期间稍后传输的。如果对象是岩石,则与每个记录关联的标签包含字母 “ $\mathrm{R}$ ”,如果是地雷 (金属圆柱体) 则包含字母 “M”。标签中的数字按长宽比的高低顺序排列, 但它们不直接对角度进行编码。</p><h2 id="2-logistic-回归与神经网络"><a href="#2-logistic-回归与神经网络" class="headerlink" title="2 logistic 回归与神经网络"></a>2 logistic 回归与神经网络</h2><p>由于 logistic 分类本质为线性求和以及激活函数的作用, 因此这里使用了神经网络框架来实现 logistic 回归, 即神经网络框架只有一个线性层, 然后使用 sigmoid 激活函数, 在结果的判定中对得到的结果进行分类, 即当结果大于 0.5 的时候为一类, 否则为另一类, 即可得出结果, 因此这两种方法同时实现了。</p><h2 id="2-1-背景知识"><a href="#2-1-背景知识" class="headerlink" title="2.1 背景知识"></a>2.1 背景知识</h2><h2 id="2-1-1-线性及-sigmoid-函数"><a href="#2-1-1-线性及-sigmoid-函数" class="headerlink" title="2.1.1 线性及 sigmoid 函数"></a>2.1.1 线性及 sigmoid 函数</h2><p>logistic 分类为一个线性求和和一个 sigmoid 激活组成，假设有一个 $n$ 维的输入列向量 $x$，也有一个 $n$ 维的参数列向量 $h$，还有一个偏置量 $b$ 那么就可以线性求和得到 $z_{\mathrm{s}}$：</p><p>$$<br>z &#x3D; h^T x + b<br>$$</p><p>这个时候值的范围仍是 $({-}\infty, +\infty)$，无法判断出来分类，这个时候就需要一个激活函数来将值进行划分，这里使用的激活函数是 sigmoid 函数：</p><p>$$<br>\sigma(x) &#x3D; \frac{1}{1 + e^{-x}}<br>$$</p><p>其导数有以下规律：</p><p>$$<br>\sigma’(x) &#x3D; \sigma(x)(1 - \sigma(x))<br>$$</p><p>其图像如下图所示：</p><p>$$<br>a &#x3D; \sigma(z) &#x3D; \sigma\left( h^T x + b \right)<br>$$</p><p>这样进行判别，当 $a$ 大于 0.5 的时候，可以判定 $x$ 属于一类，否则属于另一类，即可进行分类。</p><h2 id="2-1-2-计算误差及修正参数"><a href="#2-1-2-计算误差及修正参数" class="headerlink" title="2.1.2 计算误差及修正参数"></a>2.1.2 计算误差及修正参数</h2><p>在凸优化问题中, 可以通过导数为零进行计算。</p>\[\frac{\partial C}{\partial h} = 0, \quad \frac{\partial C}{\partial b} = 0\]<img src="https://cdn.noedgeai.com/d053b280-ea92-40ab-9212-b8dc526c4b19_3.jpg?x=158&y=61&w=520&h=338 "/><p>图 1: sigmoid 函数图像</p><p>这种直接的计算在小规模情况下可行, 但在大规模数据以及非凸优化的情况下, 采用迭代的方法得到局部最优解的方式更加可行，即如下方法：</p><p>$$<br>h &#x3D; h - \eta \frac{\partial C}{\partial h}<br>$$</p><p>$$<br>b &#x3D; b - \eta \frac{\partial C}{\partial b}<br>$$</p><p>其中 $\eta$ 表示学习率，这里损失函数可以使用平方差损失。即 $C &#x3D; \frac{1}{2}(a - y)$，并进行迭代，即可求出结果。</p><h2 id="2-2-代码实现及结果分析"><a href="#2-2-代码实现及结果分析" class="headerlink" title="2.2 代码实现及结果分析"></a>2.2 代码实现及结果分析</h2><p>这里首先导入数据并将标签进行二值化, 然后利用 sklearn 来将数据进行划分, 得到训练集以及测试集。随后定义网络结构, 即仅有一个线性层并使用 sigmoid 激活函数的神经网络, 并将特征设置为数据的维度, 之后分别定义训练函数以及测试函数。然后将上文划分好的测试集以及训练集利用 TensorDataset 以及 DataLoader 得到可以送入神经网络的迭代器, 定义损失函数使用均方损失, 优化器这里使用了著名的不需要调参数的 Adadelta, 因为之前使用 SGD 的时候结果在参数调整不合适的情况会出现很大问题。最后训练并测试结果, 并将其可视化出来, 得到结果如下图所示:<br>又上图可知, 随着迭代次数的增多, 损失在不断下降, 而训练的精度则为先升后降的趋势,最高可以达到 (83%) 的精度。因为随着迭代次数过多,出现了过拟合的情况,使得模型在训练数据中取得的误差更小, 但是在测试数据中准确率反而不够高, 这也反映了仅使用线性网络可能导致的结果问题, 可以通过调整结果正则化以及控制迭代次数等方法来提高模型的性能。</p><img src="https://cdn.noedgeai.com/d053b280-ea92-40ab-9212-b8dc526c4b19_4.jpg?x=133&y=64&w=574&h=239 "/><p>图 2: logistic 分类结果</p><h2 id="3-高斯判别分析"><a href="#3-高斯判别分析" class="headerlink" title="3 高斯判别分析"></a>3 高斯判别分析</h2><h2 id="3-1-背景知识"><a href="#3-1-背景知识" class="headerlink" title="3.1 背景知识"></a>3.1 背景知识</h2><p>高斯判别分析是一个比较直观的模型, 一个基本的假设就是得到的数据是独立同分布<br>的, 虽然这种假设在实际中很难达到, 但是在有了好的假设后可以得到较好的结果。<br>一维正态分布为:</p><p>$$<br>f(x) &#x3D; \frac{1}{\sqrt{2\pi}\sigma} \exp \left( -\frac{(x - \mu)^2}{2\sigma^2} \right)<br>$$</p><p>其中 $x$ 为样本特征, $\sigma$ 为标准差, $\mu$ 为样本期望值，并将该分布记为 $N(\mu, \sigma^2)$，当 $\mu &#x3D; 0$，$\sigma &#x3D; 1$ 时候的正态分布是标准正态分布。</p><p>$n$ 维正态分布表示为：</p><p>$$<br>p(x; \mu, \Sigma) &#x3D; \frac{1}{(2\pi)^{n&#x2F;2} |\Sigma|^{1&#x2F;2}} \exp\left( -\frac{1}{2} (x - \mu)^T \Sigma^{-1} (x - \mu) \right)<br>$$</p><p>其中 (p(x; \mu, \Sigma)) 中的 (\mu, \Sigma) 分别表示均值向量以及协方差矩阵。</p><p>将 (n) 维高斯分布应用到监督学习中，假设输入数据为 (x)，输出类别为 (y \in {0,1})，则对应分类问题可以描述为：</p><p>$$<br>y \approx \operatorname{Bernoulli}(\phi)<br>$$</p><p>$$<br>x | y &#x3D; 0 \approx \mathcal{N}(\mu_0, \Sigma)<br>$$</p><p>$$<br>x | y &#x3D; 1 \approx \mathcal{N}(\mu_1, \Sigma)<br>$$</p><p>其中 Bernoulli((\phi)) 表示伯努利分布，通过推导可以得出样本分类的依据：</p><p>$$<br>p(y | x) &#x3D; \frac{p(x | y) p(y)}{p(x)}<br>$$</p><p>$$<br>y &#x3D; \underset{y}{\arg\max} , p(y | x)<br>$$</p><p>$$<br>&#x3D; \underset{y}{\arg\max} , p(x | y) p(y)<br>$$</p><h2 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h2><p>首先求出训练数据的均值向量以及协方差矩阵, 然后利用公式分布求出正负样本的概<br>率,最后将测试数据传入并与实际结果对比,得出准确率为 (75.00%) 。</p><h2 id="4-贝叶斯分类"><a href="#4-贝叶斯分类" class="headerlink" title="4 贝叶斯分类"></a>4 贝叶斯分类</h2><h2 id="4-1-背景知识"><a href="#4-1-背景知识" class="headerlink" title="4.1 背景知识"></a>4.1 背景知识</h2><p>贝叶斯分类是一类分类算法的总称, 一类算法以贝叶斯定理为基础, 统称为贝叶斯分类。朴素贝叶斯是贝叶斯分类中最简单常见的一种分类方法。理论上朴素贝叶斯模型比其他分类方法误差率更小, 但是由于朴素贝叶斯模型假设属性之间相互独立, 但是这个假设在实际中往往不成立, 在属性个数多或者属性相关性较大的时候, 分类效果差。朴素贝叶斯逻辑简单, 易于实现, 而且分类过程中开销比较小, 其核心算法是贝叶斯公式:<br>[P(B {\mid} A) &#x3D; \frac{P(A {\mid} B)P(B)}{P(A)}]<br>其中 (A) 为特征, (B) 为类别。</p><h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h2><p>这里首先定义一个 gaussion_pdf 函数,这个函数的作用就是利用 (n) 维正态分布的公式,从而求得 (n) 维正态分布的分布情况,从而为预测函数提供概率基础,然后定义一个预测函数 predict,利用 numpy 的 unique 求得分类数,并对每一类分布,求得 (P(y)) 以及 (P(x {\mid} y)) ,最后将测试集传入,并与测试集的标签对比得出结果。<br>经过实践,得到准确率为 (63.46%) 。</p><h2 id="5-性能分析"><a href="#5-性能分析" class="headerlink" title="5 性能分析"></a>5 性能分析</h2><p>从性能上来说, 贝叶斯分类开销比较小, 而 logistic 神经网络法则比较大, 这是因为神经网络使用的空间等相对较大, 而贝叶斯由于采用的仅为样本空间, 因此性能相对较好。<br>从结果来说, (\operatorname{logistic}) 分类的结果在迭代次数合适的时候可以达到 (80%) 以上,高斯判别<br>分析可以达到 (75%) ,贝叶斯分类的准确率为 (63.46%) ,因此 logistic 效果最好。</p><h2 id="6-时效分析"><a href="#6-时效分析" class="headerlink" title="6 时效分析"></a>6 时效分析</h2><p>代码中已经利用了库函数 time 来计算程序运行的时间, 经过测试, logistic 分类经过 100 次迭代使用的时间为 (2.35\mathrm{\ s}) ,而高斯判别分析用时为 (0.02\mathrm{\ s}) ,贝叶斯分类用时 (0.01\mathrm{\ s}) ,调用的贝叶斯分类函数,其用时同样为 (0.01\mathrm{\ s}) 。<br>从时间上来说, 采用神经网络的 logistic 分类使用的轮次较多, 平均下来, 每训练一轮为 (0.02\mathrm{\ s}) ,与高斯判别分析时间近似相等,两者都差于贝叶斯分类,自己时间的贝叶斯与库函数实现的贝叶斯时间上相差不大。<br>对于时间, logistic 分类每一轮都遍历一遍样本, 贝叶斯分类只遍历一次样本, 高斯判<br>别分析需要便利每个样本的每个特征。<br>对于空间, logistic 分类只需用一个样本的空间, 贝叶斯分类需要有数据的类别空间, 高<br>斯判别分析需要有正负样本的存储空间。<br>表 1: 时效分析</p><table><thead><tr><th></th><th>logistic 分类</th><th>贝叶斯分类</th><th>GDA 分类</th></tr></thead><tbody><tr><td>时间复杂度</td><td>(\theta(m {\cdot} k))</td><td>(\theta(m))</td><td>(\theta(m {\cdot} d))</td></tr><tr><td>空间复杂度</td><td>(\theta(d))</td><td>(\theta(d {\cdot} K))</td><td>(\theta(d^{2}))</td></tr></tbody></table><p>其中 (\mathrm{m}) 为样本数, (\mathrm{d}) 为特征维数, (\mathrm{k}) 为迭代次数。</p><h2 id="7-影响因素分析"><a href="#7-影响因素分析" class="headerlink" title="7 影响因素分析"></a>7 影响因素分析</h2><h2 id="7-1-logistic-分类"><a href="#7-1-logistic-分类" class="headerlink" title="7.1 logistic 分类"></a>7.1 logistic 分类</h2><p>在这个方法中, 我在写的过程中遇到的一个问题就是优化器的选取, 在开始使用 SGD 的时候, 损失在很短的时间就达到很大, 显示出 nan, 经过多次尝试才明白出问题的地方, 修改后, 效果较好。</p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h2><p>在这次的机器学习大作业中我收获很大, 这次的作用并不容易, 不仅仅要完成三个方法的分类任务, 一个重要方面是对方法的分析, 包括性能分析, 时效分析等, 这也是对能力的一次锻炼, 收获很大。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 详解朴素贝叶斯分类算法 <a href="https://blog.csdn.net/ccblogger/article/details/81712351">https://blog.csdn.net/ccblogger/article/details/81712351</a>? ivk_sa&#x3D;1024320u</p><p>[2] <a href="https://www.cnblogs.com/phoenixzq/p/3539619.html">贝叶斯分类</a> </p><p>[3] <a href="https://zhuanlan.zhihu.com/p/38269530">高斯判别分析</a></p><h2 id="A-logistic-分类代码"><a href="#A-logistic-分类代码" class="headerlink" title="A logistic 分类代码"></a>A logistic 分类代码</h2><ul><li>logistic 分类.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sat Apr 10 16:56:09 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: tremble</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">file=pd.read_csv(<span class="string">&#x27;D:/桌面/sonar.csv&#x27;</span>,header=<span class="literal">None</span>)</span><br><span class="line">data=file.iloc[:,:<span class="number">40</span>]</span><br><span class="line">target=file.iloc[:,-<span class="number">1</span>]</span><br><span class="line">data=np.array(data,dtype=<span class="built_in">float</span>)</span><br><span class="line">target=pd.get_dummies(target).iloc[:,<span class="number">0</span>]</span><br><span class="line">data=torch.tensor(data,dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target=torch.tensor(target,dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,\</span><br><span class="line">    target,test_size=<span class="number">0.25</span>,random_state=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">logistic_net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,features</span>):</span><br><span class="line">        <span class="built_in">super</span>(logistic_net,self).__init__()</span><br><span class="line">        self.linear=nn.Linear(features,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=self.linear(x)</span><br><span class="line">        x=torch.sigmoid(x)</span><br><span class="line">        x = x.squeeze(-<span class="number">1</span>)    </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">model=logistic_net(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">model, train_loader, optimizer, epoch, criterion</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, i * <span class="built_in">len</span>(data), <span class="built_in">len</span>(train_loader.dataset),</span><br><span class="line">                       <span class="number">100.</span> * i / <span class="built_in">len</span>(train_loader), loss.item()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">model,test_loader, criterion</span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            pred=torch.Tensor(<span class="built_in">len</span>(target),<span class="number">1</span>)</span><br><span class="line">            output = model(data)</span><br><span class="line">            test_loss += criterion(output, target).item()  <span class="comment"># sum up batch loss</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)):</span><br><span class="line">                <span class="keyword">if</span> output[i]&gt;<span class="number">0.5</span>:</span><br><span class="line">                    pred[i]=torch.tensor(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pred[i]=torch.tensor(<span class="number">0</span>)</span><br><span class="line">            <span class="comment">#pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability</span></span><br><span class="line">            correct += pred.eq(target.view_as(pred)).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    test_loss /= <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        test_loss, correct, <span class="built_in">len</span>(test_loader.dataset),</span><br><span class="line">        <span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset)))</span><br><span class="line">    <span class="keyword">return</span> test_loss,<span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trainset=torch.utils.data.TensorDataset(x_train,y_train)</span><br><span class="line">testset=torch.utils.data.TensorDataset(x_test,y_test)</span><br><span class="line">trainloader=torch.utils.data.DataLoader(trainset,batch_size=<span class="number">4</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line">testloader=torch.utils.data.DataLoader(testset,batch_size=<span class="number">4</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line">optimizer = optim.Adadelta(model.parameters(), lr=<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epoch_list,ls_list,accuracy_list=[],[],[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    train(model,trainloader, optimizer, epoch, criterion)</span><br><span class="line">    ls,accuracy=test(model, testloader, criterion)</span><br><span class="line">    epoch_list.append(epoch)</span><br><span class="line">    ls_list.append(ls)</span><br><span class="line">    accuracy_list.append(accuracy)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.plot(epoch_list,ls_list,linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.plot(epoch_list,accuracy_list,linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch &#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;用时&#123;:.2f&#125;s&#x27;</span>.<span class="built_in">format</span>(time.time()-start))</span><br></pre></td></tr></table></figure><h2 id="B-GDA-分类代码"><a href="#B-GDA-分类代码" class="headerlink" title="B GDA 分类代码"></a>B GDA 分类代码</h2><ul><li>GDA 分类.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sat Apr 10 18:11:49 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: tremble</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">file=pd.read_csv(<span class="string">&#x27;D:/桌面/sonar.csv&#x27;</span>,header=<span class="literal">None</span>)</span><br><span class="line">data=file.iloc[:,:<span class="number">40</span>]</span><br><span class="line">target=file.iloc[:,-<span class="number">1</span>]</span><br><span class="line">data=np.array(data,dtype=<span class="built_in">float</span>)</span><br><span class="line">target=pd.get_dummies(target).iloc[:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,\</span><br><span class="line">                target,test_size=<span class="number">0.25</span>,random_state=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">positive_data=[]</span><br><span class="line">negative_data=[]</span><br><span class="line">positive_num=<span class="number">0</span></span><br><span class="line">negative_num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (data,label)<span class="keyword">in</span> <span class="built_in">zip</span>(x_train,y_train):</span><br><span class="line">    <span class="keyword">if</span> label ==<span class="number">1</span>:</span><br><span class="line">        positive_data.append(<span class="built_in">list</span>(data))</span><br><span class="line">        positive_num+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        negative_data.append(<span class="built_in">list</span>(data))</span><br><span class="line">        negative_num+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">row,col=np.shape(x_train)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">positive=positive_num*<span class="number">1.0</span>/row</span><br><span class="line">negative=<span class="number">1</span>-positive</span><br><span class="line">        </span><br><span class="line">positive_data=np.array(positive_data)</span><br><span class="line">negative_data=np.array(negative_data)        </span><br><span class="line">mean_positive=np.mean(positive_data,axis=<span class="number">0</span>)       </span><br><span class="line">mean_negative=np.mean(negative_data,axis=<span class="number">0</span>)        </span><br><span class="line">positive_deta=positive_data-mean_positive</span><br><span class="line">negative_deta=negative_data-mean_negative        </span><br><span class="line">        </span><br><span class="line">sigma=[]</span><br><span class="line"><span class="keyword">for</span> deta <span class="keyword">in</span> positive_deta:</span><br><span class="line">    deta=deta.reshape(<span class="number">1</span>,col)</span><br><span class="line">    ans = deta.T.dot(deta)</span><br><span class="line">    sigma.append(ans)</span><br><span class="line"><span class="keyword">for</span> deta <span class="keyword">in</span> negative_deta:</span><br><span class="line">    deta=deta.reshape(<span class="number">1</span>,col)</span><br><span class="line">    ans = deta.T.dot(deta)</span><br><span class="line">    sigma.append(ans)</span><br><span class="line">sigma=np.array(sigma)</span><br><span class="line">sigma=np.mean(sigma,axis=<span class="number">0</span>)        </span><br><span class="line">        </span><br><span class="line">mean_positive=mean_positive.reshape(<span class="number">1</span>,col)</span><br><span class="line">mean_negative=mean_negative.reshape(<span class="number">1</span>,col)        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Gaussian</span>(<span class="params">x,mean,cov</span>):</span><br><span class="line">    dim=np.shape(cov)[<span class="number">0</span>]</span><br><span class="line">    covdet = np.linalg.det(cov + np.eye(dim) * <span class="number">0.001</span>)</span><br><span class="line">    covinv = np.linalg.inv(cov + np.eye(dim) * <span class="number">0.001</span>)</span><br><span class="line">    xdiff = (x - mean).reshape((<span class="number">1</span>, dim))</span><br><span class="line">    prob = <span class="number">1.0</span> / (np.power(np.power(<span class="number">2</span> * np.pi, dim) *\</span><br><span class="line">                           np.<span class="built_in">abs</span>(covdet), <span class="number">0.5</span>)) * \</span><br><span class="line">    np.exp(-<span class="number">0.5</span> * xdiff.dot(covinv).dot(xdiff.T))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> prob        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">x_test,mean_positive,mean_negetive</span>):</span><br><span class="line">    predict_label=[]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> x_test:</span><br><span class="line">        positive_pro=Gaussian(data, mean_positive, sigma)</span><br><span class="line">        negative_pro=Gaussian(data, mean_negetive, sigma)</span><br><span class="line">        <span class="keyword">if</span> positive_pro&gt;=negative_pro:</span><br><span class="line">            predict_label.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            predict_label.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> predict_label        </span><br><span class="line">        </span><br><span class="line">test_predict=predict(x_test,mean_positive,mean_negative)        </span><br><span class="line">        </span><br><span class="line">test_predict=np.array(test_predict)</span><br><span class="line">y_test=np.array(y_test)        </span><br><span class="line">        </span><br><span class="line">accuracy=(test_predict==y_test).<span class="built_in">sum</span>().item()/<span class="built_in">len</span>(y_test)        </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;用时&#123;:.2f&#125;s,准确率为&#123;:.2f&#125;%&#x27;</span>.\</span><br><span class="line">      <span class="built_in">format</span>(time.time()-start,accuracy*<span class="number">100.0</span>))        </span><br></pre></td></tr></table></figure><h2 id="C-贝叶斯分类代码"><a href="#C-贝叶斯分类代码" class="headerlink" title="C 贝叶斯分类代码"></a>C 贝叶斯分类代码</h2><ul><li>贝叶斯分类.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sat Apr 10 18:36:49 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: tremble</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">file=pd.read_csv(<span class="string">&#x27;D:/桌面/sonar.csv&#x27;</span>,header=<span class="literal">None</span>)</span><br><span class="line">data=file.iloc[:,:<span class="number">40</span>]</span><br><span class="line">target=file.iloc[:,-<span class="number">1</span>]</span><br><span class="line">data=np.array(data,dtype=<span class="built_in">float</span>)</span><br><span class="line">target=pd.get_dummies(target).iloc[:,<span class="number">0</span>]</span><br><span class="line">data=np.array(data,dtype=<span class="built_in">float</span>)</span><br><span class="line">target=np.array(target,dtype=<span class="built_in">float</span>)</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,\</span><br><span class="line">            target,test_size=<span class="number">0.25</span>,random_state=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gaussion_pdf</span>(<span class="params">x_test, x</span>):</span><br><span class="line">        temp1 = (x_test - x.mean(<span class="number">0</span>)) * (x_test - x.mean(<span class="number">0</span>))</span><br><span class="line">        temp2 = x.std(<span class="number">0</span>) * x.std(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> np.exp(-temp1 / (<span class="number">2</span> * temp2)) / np.sqrt(<span class="number">2</span> * np.pi * temp2)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">x_train,y_train,x_test</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(x_test.shape) == <span class="number">2</span></span><br><span class="line">        classes = np.unique(y_train)</span><br><span class="line">        pred_probs = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> classes:</span><br><span class="line">            idx_i = y_train == i</span><br><span class="line">            p_y = <span class="built_in">len</span>(idx_i) / <span class="built_in">len</span>(y_train)</span><br><span class="line">            p_x_y = np.prod(gaussion_pdf(x_test,x_train[idx_i]), <span class="number">1</span>)</span><br><span class="line">            prob_i = p_y * p_x_y</span><br><span class="line">            pred_probs.append(prob_i)</span><br><span class="line">        pred_probs = np.vstack(pred_probs)</span><br><span class="line">        label_idx = pred_probs.argmax(<span class="number">0</span>)</span><br><span class="line">        y_pred = classes[label_idx]</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line">    </span><br><span class="line">y_predict=predict(x_train,y_train,x_test)</span><br><span class="line"></span><br><span class="line">accuracy=(y_predict==y_test).<span class="built_in">sum</span>().item()/<span class="built_in">len</span>(y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;准确率为&#123;:.2f&#125;%,用时&#123;:.2f&#125;s&#x27;</span>.<span class="built_in">format</span>(accuracy*<span class="number">100.0</span>,\</span><br><span class="line">                                     time.time()-start))</span><br></pre></td></tr></table></figure></li></ul><h2 id="D-贝叶斯库函数调用分类代码"><a href="#D-贝叶斯库函数调用分类代码" class="headerlink" title="D 贝叶斯库函数调用分类代码"></a>D 贝叶斯库函数调用分类代码</h2><ul><li>贝叶斯调用实现.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sat Apr 10 19:53:00 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: tremble</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">file=pd.read_csv(<span class="string">&#x27;D:/桌面/sonar.csv&#x27;</span>,header=<span class="literal">None</span>)</span><br><span class="line">data=file.iloc[:,:<span class="number">40</span>]</span><br><span class="line">target=file.iloc[:,-<span class="number">1</span>]</span><br><span class="line">data=np.array(data,dtype=<span class="built_in">float</span>)</span><br><span class="line">target=pd.get_dummies(target).iloc[:,<span class="number">0</span>]</span><br><span class="line">data=np.array(data,dtype=<span class="built_in">float</span>)</span><br><span class="line">target=np.array(target,dtype=<span class="built_in">float</span>)</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,\</span><br><span class="line">            target,test_size=<span class="number">0.25</span>,random_state=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = GaussianNB()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line">test_predict_model = model.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逻辑回归的正确率为：&#123;:.2f&#125;%,用时为&#123;:.2f&#125;s&quot;</span>.\</span><br><span class="line">      <span class="built_in">format</span>(accuracy_score(y_test,\</span><br><span class="line">        test_predict_model)*<span class="number">100.0</span>,time.time() - start))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目-录&quot;&gt;&lt;a href=&quot;#目-录&quot; class=&quot;headerlink&quot; title=&quot;目 录&quot;&gt;&lt;/a&gt;目 录&lt;/h2&gt;&lt;p&gt;1 数据集 1&lt;br&gt;2 logistic 回归与神经网络 1&lt;br&gt;2.1 背景知识 1&lt;br&gt;2.1.1 线性及 sigmoid</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>记录我的第一次搭建博客</title>
    <link href="http://example.com/2020/10/31/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/10/31/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-31T00:00:00.000Z</published>
    <updated>2024-04-09T14:32:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="艰难的第一次搭博客"><a href="#艰难的第一次搭博客" class="headerlink" title="艰难的第一次搭博客"></a>艰难的第一次搭博客</h1><p>其实我在很早之前就想搭博客，大概大一开始的时候，就想着做一些有意义，有兴趣的事，结果一直拖到了现在才开始真正意义上的实践，我也是趁着这次对大一的培训搭建博客，顺便才开始做，看上去不是很难的一件事，实际去做，我却遇到了很多困难，就光配置markdown的front-matter的时候，因为不知道里面还有其他东西，就一直报错，而且和其他一起弄的，我还找不到原因，就导致我花了很大的时间，最后遇到的一个问题是图片的在线存储问题，最后用的码云的仓库来放的，最后头像也解决了，我才能说，我基本才算是搭建成了一个基本的框架。<br>哎，之前跟现在相比，其实并不忙的，但也是懒，还有各种找的原因，结果到现在，对这样搭博客的基本知识都还都不太了解，有点小愧疚，以后还是得加把劲了。<br>现在还有一堆大作业要去写，剩下的时间也不多了，就先这样吧。</p>]]></content>
    
    
    <summary type="html">我太难了</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
